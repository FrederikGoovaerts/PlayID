include <LTC>

LTCvocabulary V {
	// Default vocabulary elements (and types needed by the default elements)
	type Time isa nat
	Start : Time
	partial Next(Time) : Time
	type All constructed from {i84,i83,i86,i100,i85,i101,i80,i82,i81,i88,i87,i89,i0,i15,i5,i14,i6,i17,i7,i16,i8,i11,i1,i2,i10,i13,i3,i12,i4,i97,i96,i95,i94,i93,i18,i92,i19,i9,i91,i90,i99,i98,i20,i24,i23,i22,i21,i28,i27,i26,i25,i29,e,b,i31,i30,i33,i32,i35,i34,i37,i36,i39,i38,i47,i48,i49,i43,i44,i45,i46,i40,i41,i42,i58,i59,i56,i57,i54,i55,i52,i53,i50,i51,i65,i66,i67,i68,i69,i60,i61,i62,i63,i64,i78,i79,i76,i77,i70,i71,i74,i75,i72,i73}
	type Action constructed from {write(All,All,All,All)}
	terminalTime(Time)
	type ScoreType isa nat
	type Player constructed from {p_player}
	Score(Player) : ScoreType
	do(Time,Player,Action)
	
	// Vocabulary elements derived from GDL file
	succ(All,All)
	count_val(Time,All,All,All)
	hor(Time,All,All,All)
	diff_aux(Time,All,All,All)
	diff1(Time,All,All)
	count_hor(Time,All,All,All,All)
	count_ver(Time,All,All,All,All)
	bigger(Time,All,All)
	diff(Time,All,All)
	neighbours(Time,All,All,All)
	ver(Time,All,All,All)
	count_val1(Time,All,All,All)
	diff_aux1(Time,All,All,All)
	
	// LTC predicates for the fluent predicates
	cell(Time,All,All,All,All)
	I_cell(All,All,All,All)
	C_cell(Time,All,All,All,All)
	
	step(Time,All)
	I_step(All)
	C_step(Time,All)
	
}
theory T: V {
	// Default theory elements:
	! a [Action] t [Time] p [Player]  : do(t,p,a) => ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2).
	! p [Player] t [Time]  : ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2) => (?=1 a [Action]  : do(t,p,a)).
	{
		! t [Time]  : Next(t) = t + 1 <- ~terminalTime(t) & (? t2 [Time]  : Next(t2) = t).
		Next(0) = 1.
	}
	
	// Inductive definitions for the fluent predicates
	{
		! a [All] a3 [All] a2 [All] a4 [All]  : cell(Start,a,a2,a3,a4) <- I_cell(a,a2,a3,a4).
		! a [All] a3 [All] t [Time] a2 [All] a4 [All]  : cell(Next(t),a,a2,a3,a4) <- C_cell(t,a,a2,a3,a4).
	}
	{
		! a [All]  : step(Start,a) <- I_step(a).
		! a [All] t [Time]  : step(Next(t),a) <- C_step(t,a).
	}
	
	// The fluent predicates' causations
	{
		! y [All] x [All] t [Time]  : C_step(t,y) <- step(t,x) & succ(x,y).
	}
	{
		! y [All] x [All] value [All] t [Time]  : C_cell(t,x,y,value,b) <- do(t,p_player,write(x,y,value,b)).
		! b [All] y [All] x [All] a [All] value [All] color2 [All] color [All] value2 [All] t [Time]  : C_cell(t,x,y,value,color) <- cell(t,x,y,value,color) & do(t,p_player,write(a,b,value2,color2)) & (x ~= a | y ~= b).
		! y [All] x [All] value [All] t [Time]  : C_cell(t,x,y,value,e) <- do(t,p_player,write(x,y,value,e)).
	}
	
	// The static predicates' causations
	{
		! y [All] x [All] value [All] color [All] count [All] t [Time]  : count_val1(t,x,y,count) <- cell(t,x,y,value,color) & count_ver(t,i1,y,value,count).
	}
	{
		! y [All] value [All] color [All] value2 [All] value1 [All] t [Time]  : count_ver(t,i5,y,value,i0) <- cell(t,i5,y,value1,color) & value ~= value1 & succ(value,value2).
		! y [All] value [All] t [Time]  : count_ver(t,i5,y,value,i0) <- cell(t,i5,y,value,b).
		! y [All] x [All] value [All] x1 [All] count [All] t [Time]  : count_ver(t,x,y,value,count) <- cell(t,x,y,value,b) & succ(x,x1) & count_ver(t,x1,y,value,count).
		! y [All] value [All] t [Time]  : count_ver(t,i5,y,value,i1) <- cell(t,i5,y,value,e).
		! y [All] x [All] value [All] color [All] x1 [All] count [All] value1 [All] t [Time]  : count_ver(t,x,y,value,count) <- cell(t,x,y,value1,color) & value ~= value1 & succ(x,x1) & count_ver(t,x1,y,value,count).
		! count1 [All] y [All] x [All] value [All] x1 [All] count [All] t [Time]  : count_ver(t,x,y,value,count) <- cell(t,x,y,value,e) & succ(x,x1) & count_ver(t,x1,y,value,count1) & succ(count1,count).
	}
	{
		! y [All] x [All] value [All] color [All] count [All] t [Time]  : count_val(t,x,y,count) <- cell(t,x,y,value,color) & count_hor(t,x,i1,value,count).
	}
	{
		! count1 [All] y [All] y1 [All] x [All] value [All] count [All] t [Time]  : count_hor(t,x,y,value,count) <- cell(t,x,y,value,e) & succ(y,y1) & count_hor(t,x,y1,value,count1) & succ(count1,count).
		! x [All] value [All] color [All] value2 [All] value1 [All] t [Time]  : count_hor(t,x,i5,value,i0) <- cell(t,x,i5,value1,color) & value ~= value1 & succ(value,value2).
		! y [All] y1 [All] x [All] value [All] color [All] count [All] value1 [All] t [Time]  : count_hor(t,x,y,value,count) <- cell(t,x,y,value1,color) & value ~= value1 & succ(y,y1) & count_hor(t,x,y1,value,count).
		! x [All] value [All] t [Time]  : count_hor(t,x,i5,value,i1) <- cell(t,x,i5,value,e).
		! x [All] value [All] t [Time]  : count_hor(t,x,i5,value,i0) <- cell(t,x,i5,value,b).
		! y [All] y1 [All] x [All] value [All] count [All] t [Time]  : count_hor(t,x,y,value,count) <- cell(t,x,y,value,b) & succ(y,y1) & count_hor(t,x,y1,value,count).
	}
	{
		! y [All] x [All] x1 [All] v1 [All] t [Time]  : diff(t,x,y) <- cell(t,x,y,v1,e) & succ(x,x1) & diff_aux(t,x1,y,v1).
		! y [All] x [All] v [All] t [Time]  : diff(t,x,y) <- cell(t,x,y,v,b).
	}
	{
		! y [All] x [All] v [All] x1 [All] v1 [All] t [Time]  : diff_aux1(t,x,y,v) <- succ(y,i7) & succ(x,x1) & succ(v,v1).
		! y [All] y1 [All] x [All] v [All] v1 [All] t [Time]  : diff_aux1(t,x,y,v) <- cell(t,x,y,v1,b) & succ(y,y1) & diff_aux1(t,x,y1,v).
		! y [All] y1 [All] x [All] v [All] v1 [All] t [Time]  : diff_aux1(t,x,y,v) <- cell(t,x,y,v1,e) & v ~= v1 & succ(y,y1) & diff_aux1(t,x,y1,v).
	}
	{
		! y [All] y1 [All] x [All] t [Time]  : bigger(t,x,y) <- succ(y,y1) & bigger(t,x,y1).
		! y [All] x [All] t [Time]  : bigger(t,x,y) <- succ(y,x).
	}
	{
		! y [All] x2 [All] x [All] value [All] x1 [All] value1 [All] t [Time]  : ver(t,x,y,e) <- succ(x1,x) & succ(x,x2) & cell(t,x1,y,value,e) & cell(t,x2,y,value1,e).
		! y [All] value [All] t [Time]  : ver(t,i5,y,e) <- cell(t,i4,y,value,e).
		! y [All] value [All] t [Time]  : ver(t,i1,y,e) <- cell(t,i2,y,value,e).
	}
	{
		! y [All] y1 [All] x [All] v1 [All] t [Time]  : diff1(t,x,y) <- cell(t,x,y,v1,e) & succ(y,y1) & diff_aux1(t,x,y1,v1).
		! y [All] x [All] v [All] t [Time]  : diff1(t,x,y) <- cell(t,x,y,v,b).
	}
	{
		! y [All] x [All] t [Time]  : neighbours(t,x,y,e) <- hor(t,x,y,e) & ver(t,x,y,e).
	}
	{
		! y [All] y1 [All] x [All] value [All] value1 [All] t [Time] y2 [All]  : hor(t,x,y,e) <- succ(y1,y) & succ(y,y2) & cell(t,x,y1,value,e) & cell(t,x,y2,value1,e).
		! x [All] value [All] t [Time]  : hor(t,x,i1,e) <- cell(t,x,i2,value,e).
		! x [All] value [All] t [Time]  : hor(t,x,i5,e) <- cell(t,x,i4,value,e).
	}
	{
		! y [All] x [All] v [All] x1 [All] v1 [All] t [Time]  : diff_aux(t,x,y,v) <- cell(t,x,y,v1,b) & succ(x,x1) & diff_aux(t,x1,y,v).
		! y [All] x [All] v [All] x1 [All] v1 [All] t [Time]  : diff_aux(t,x,y,v) <- cell(t,x,y,v1,e) & v ~= v1 & succ(x,x1) & diff_aux(t,x1,y,v).
		! y [All] y1 [All] x [All] v [All] v1 [All] t [Time]  : diff_aux(t,x,y,v) <- succ(x,i7) & succ(y,y1) & succ(v,v1).
	}
	
	// Translation of the LEGAL sentences
	! count1 [All] y [All] x [All] value [All] t [Time] count2 [All]  : do(t,p_player,write(x,y,value,b)) => cell(t,x,y,value,e) & neighbours(t,x,y,e) & count_val(t,x,y,count1) & count_val1(t,x,y,count2) & (bigger(t,count1,i1) | bigger(t,count2,i1)).
	! y [All] x [All] value [All] t [Time]  : do(t,p_player,write(x,y,value,e)) => cell(t,x,y,value,b).
	
	// Translation of the SCORE sentences
	{
		Score(p_player) = 100 <- ! t [Time]  : terminalTime(t) => ~step(t,i100).
		Score(p_player) = 1 <- ! t [Time]  : terminalTime(t) => step(t,i100).
	}
	
	// Translation of the TERMINAL sentences
	{
		! t [Time]  : terminalTime(t) <- step(t,i100).
		! t [Time]  : terminalTime(t) <- diff(t,i1,i1) & diff(t,i2,i1) & diff(t,i3,i1) & diff(t,i4,i1) & diff(t,i1,i2) & diff(t,i2,i2) & diff(t,i3,i2) & diff(t,i4,i2) & diff(t,i1,i3) & diff(t,i2,i3) & diff(t,i3,i3) & diff(t,i4,i3) & diff(t,i1,i4) & diff(t,i2,i4) & diff(t,i3,i4) & diff(t,i4,i4) & diff(t,i1,i5) & diff(t,i2,i5) & diff(t,i3,i5) & diff(t,i4,i5) & diff1(t,i1,i1) & diff1(t,i1,i2) & diff1(t,i1,i3) & diff1(t,i1,i4) & diff1(t,i2,i1) & diff1(t,i2,i2) & diff1(t,i2,i3) & diff1(t,i2,i4) & diff1(t,i3,i1) & diff1(t,i3,i2) & diff1(t,i3,i3) & diff1(t,i3,i4) & diff1(t,i4,i1) & diff1(t,i4,i2) & diff1(t,i4,i3) & diff1(t,i4,i4) & diff1(t,i5,i1) & diff1(t,i5,i2) & diff1(t,i5,i3) & diff1(t,i5,i4).
	}
}
structure S : V {
	// Default structure elements:
	Start = 0
	Time = {0..20}
	ScoreType = {0..100}
	
	// Desired result
	Score = {p_player->100}
	
	// Initial values for the fluent predicates
	I_step = {i0}
	I_cell = {i4,i4,i4,e;i1,i4,i2,e;i5,i4,i5,e;i3,i2,i1,e;i2,i3,i5,e;i3,i3,i3,e;i5,i1,i4,e;i5,i5,i4,e;i1,i3,i2,e;i5,i2,i5,e;i2,i5,i1,e;i4,i5,i2,e;i1,i1,i5,e;i4,i3,i5,e;i5,i3,i1,e;i2,i1,i3,e;i1,i2,i5,e;i3,i1,i3,e;i1,i5,i3,e;i2,i2,i4,e;i2,i4,i2,e;i3,i5,i5,e;i4,i2,i5,e;i3,i4,i3,e;i4,i1,i1,e}
	
	// All values found in the static predicates
	succ = {i37,i38;i60,i61;i92,i93;i0,i1;i23,i24;i74,i75;i68,i69;i55,i56;i42,i43;i8,i9;i14,i15;i87,i88;i38,i39;i69,i70;i61,i62;i91,i92;i90,i91;i1,i2;i22,i23;i73,i74;i30,i31;i56,i57;i13,i14;i86,i87;i43,i44;i48,i49;i94,i95;i39,i40;i66,i67;i31,i32;i25,i26;i76,i77;i40,i41;i19,i20;i6,i7;i12,i13;i85,i86;i57,i58;i93,i94;i50,i51;i67,i68;i24,i25;i75,i76;i32,i33;i11,i12;i7,i8;i84,i85;i41,i42;i58,i59;i49,i50;i51,i52;i96,i97;i59,i60;i10,i11;i46,i47;i78,i79;i33,i34;i64,i65;i83,i84;i4,i5;i18,i19;i70,i71;i27,i28;i95,i96;i52,i53;i47,i48;i34,i35;i77,i78;i99,i100;i65,i66;i82,i83;i5,i6;i17,i18;i26,i27;i44,i45;i53,i54;i98,i99;i62,i63;i29,i30;i21,i22;i35,i36;i81,i82;i2,i3;i16,i17;i89,i90;i72,i73;i45,i46;i88,i89;i97,i98;i54,i55;i63,i64;i36,i37;i20,i21;i80,i81;i3,i4;i15,i16;i9,i10;i79,i80;i100,i101;i71,i72;i28,i29}
}
procedure main() {
	stdoptions.nbmodels=5
	printmodels(modelexpand(T,S))
}
