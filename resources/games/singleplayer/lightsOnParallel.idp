include <LTC>

LTCvocabulary V {
	// Default vocabulary elements (and types needed by the default elements)
	type Time isa nat
	Start : Time
	partial Next(Time) : Time
	type All constructed from {i0,i20,i5,i15,i6,i14,i7,i17,i8,i16,i11,i1,i10,i2,i3,i13,i4,i12,i18,i9,i19}
	type Action constructed from {press(All,All)}
	terminalTime(Time)
	type ScoreType isa nat
	type Player constructed from {p_robot}
	Score(Player) : ScoreType
	do(Time,Player,Action)
	
	// Vocabulary elements derived from GDL file
	succ(All,All)
	index(All)
	lightsOn3(Time)
	on(Time,All,All)
	lightsOn4(Time)
	lightsOn1(Time)
	lightsOn2(Time)
	
	// LTC predicates for the fluent predicates
	cell(Time,All,All,All)
	I_cell(All,All,All)
	C_cell(Time,All,All,All)
	
	step(Time,All)
	I_step(All)
	C_step(Time,All)
	
}
theory T: V {
	// Default theory elements:
	! a [Action] t [Time] p [Player]  : do(t,p,a) => ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2).
	! p [Player] t [Time]  : ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2) => (?=1 a [Action]  : do(t,p,a)).
	{
		! t [Time]  : Next(t) = t + 1 <- ~terminalTime(t) & (? t2 [Time]  : Next(t2) = t).
		Next(0) = 1.
	}
	
	// Inductive definitions for the fluent predicates
	{
		! a [All] a3 [All] a2 [All]  : cell(Start,a,a2,a3) <- I_cell(a,a2,a3).
		! a [All] a3 [All] t [Time] a2 [All]  : cell(Next(t),a,a2,a3) <- C_cell(t,a,a2,a3).
	}
	{
		! a [All]  : step(Start,a) <- I_step(a).
		! a [All] t [Time]  : step(Next(t),a) <- C_step(t,a).
	}
	
	// The fluent predicates' causations
	{
		! b [All] a [All] t [Time]  : C_step(t,b) <- step(t,a) & succ(a,b).
	}
	{
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i3) <- cell(t,x,y,i4).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i0) <- cell(t,x,y,i1).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i4) <- do(t,p_robot,press(x,y)).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i1) <- cell(t,x,y,i2).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i0) <- cell(t,x,y,i0).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,i2) <- cell(t,x,y,i3).
	}
	
	// The static predicates' causations
	{
		! y [All] x [All] t [Time]  : on(t,x,y) <- cell(t,x,y,i1).
		! y [All] x [All] t [Time]  : on(t,x,y) <- cell(t,x,y,i2).
		! y [All] x [All] t [Time]  : on(t,x,y) <- cell(t,x,y,i3).
		! y [All] x [All] t [Time]  : on(t,x,y) <- cell(t,x,y,i4).
	}
	{
		! t [Time]  : lightsOn4(t) <- on(t,i3,i3) & on(t,i3,i4) & on(t,i4,i3) & on(t,i4,i4).
	}
	{
		! t [Time]  : lightsOn3(t) <- on(t,i1,i3) & on(t,i1,i4) & on(t,i2,i3) & on(t,i2,i4).
	}
	{
		! t [Time]  : lightsOn2(t) <- on(t,i3,i1) & on(t,i3,i2) & on(t,i4,i1) & on(t,i4,i2).
	}
	{
		! t [Time]  : lightsOn1(t) <- on(t,i1,i1) & on(t,i1,i2) & on(t,i2,i1) & on(t,i2,i2).
	}
	
	// Translation of the LEGAL sentences
	! y [All] x [All] t [Time]  : do(t,p_robot,press(x,y)) => index(x) & index(y).
	
	// Translation of the SCORE sentences
	{
		Score(p_robot) = 100 <- ! t [Time]  : terminalTime(t) => lightsOn3(t).
		Score(p_robot) = 100 <- ! t [Time]  : terminalTime(t) => lightsOn2(t).
		Score(p_robot) = 100 <- ! t [Time]  : terminalTime(t) => lightsOn4(t).
		Score(p_robot) = 100 <- ! t [Time]  : terminalTime(t) => lightsOn1(t).
		Score(p_robot) = 0 <- ! t [Time]  : terminalTime(t) => ~lightsOn1(t) & ~lightsOn2(t) & ~lightsOn3(t) & ~lightsOn4(t).
	}
	
	// Translation of the TERMINAL sentences
	{
		! t [Time]  : terminalTime(t) <- lightsOn3(t).
		! t [Time]  : terminalTime(t) <- lightsOn4(t).
		! t [Time]  : terminalTime(t) <- lightsOn1(t).
		! t [Time]  : terminalTime(t) <- lightsOn2(t).
		! t [Time]  : terminalTime(t) <- step(t,i20).
	}
}
structure S : V {
	// Default structure elements:
	Start = 0
	Time = {0..20}
	ScoreType = {0..100}
	
	// Desired result
	Score = {p_robot->100}
	
	// Initial values for the fluent predicates
	I_step = {i0}
	I_cell = {i1,i1,i0;i1,i2,i0;i2,i4,i0;i2,i1,i0;i2,i2,i0;i2,i3,i0;i3,i3,i0;i4,i2,i0;i3,i4,i0;i4,i3,i0;i4,i4,i0;i3,i2,i0;i4,i1,i0;i1,i3,i0;i3,i1,i0;i1,i4,i0}
	
	// All values found in the static predicates
	succ = {i10,i11;i0,i1;i1,i2;i15,i16;i3,i4;i16,i17;i2,i3;i17,i18;i5,i6;i18,i19;i4,i5;i9,i10;i19,i20;i7,i8;i11,i12;i12,i13;i6,i7;i13,i14;i14,i15;i8,i9}
	index = {i4;i3;i2;i1}
}
procedure main() {
	stdoptions.nbmodels=5
	printmodels(modelexpand(T,S))
}
