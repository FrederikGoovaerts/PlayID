include <LTC>

LTCvocabulary V {
	// Default vocabulary elements (and types needed by the default elements)
	type Time isa nat
	Start : Time
	partial Next(Time) : Time
	type All constructed from {light,i0,i20,i5,i15,i6,i14,i7,nolight,i17,i8,i16,i1,i11,i2,i10,i3,i13,i4,i12,i18,i9,i19}
	type Action constructed from {switch(All,All)}
	terminalTime(Time)
	type ScoreType isa nat
	type Player constructed from {p_player}
	Score(Player) : ScoreType
	do(Time,Player,Action)
	
	// Vocabulary elements derived from GDL file
	coord(All)
	nextstep(All,All)
	adj(All,All)
	lighton(Time)
	affected(Time,All,All)
	
	// LTC predicates for the fluent predicates
	cell(Time,All,All,All)
	I_cell(All,All,All)
	C_cell(Time,All,All,All)
	
	step(Time,All)
	I_step(All)
	C_step(Time,All)
	
}
theory T: V {
	// Default theory elements:
	! a [Action] t [Time] p [Player]  : do(t,p,a) => ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2).
	! p [Player] t [Time]  : ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2) => (?=1 a [Action]  : do(t,p,a)).
	{
		! t [Time]  : Next(t) = t + 1 <- ~terminalTime(t) & (? t2 [Time]  : Next(t2) = t).
		Next(0) = 1.
	}
	
	// Inductive definitions for the fluent predicates
	{
		! a [All] a3 [All] a2 [All]  : cell(Start,a,a2,a3) <- I_cell(a,a2,a3).
		! a [All] a3 [All] t [Time] a2 [All]  : cell(Next(t),a,a2,a3) <- C_cell(t,a,a2,a3).
	}
	{
		! a [All]  : step(Start,a) <- I_step(a).
		! a [All] t [Time]  : step(Next(t),a) <- C_step(t,a).
	}
	
	// The fluent predicates' causations
	{
		! oldstep [All] newstep [All] t [Time]  : C_step(t,newstep) <- step(t,oldstep) & nextstep(oldstep,newstep).
	}
	{
		! y [All] x [All] t [Time] state [All]  : C_cell(t,x,y,state) <- cell(t,x,y,state) & ~affected(t,x,y).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,nolight) <- cell(t,x,y,light) & affected(t,x,y).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,light) <- cell(t,x,y,nolight) & affected(t,x,y).
	}
	
	// The static predicates' causations
	{
		! y [All] x [All] t [Time]  : lighton(t) <- coord(x) & coord(y) & cell(t,x,y,light).
	}
	{
		! y [All] x2 [All] x1 [All] t [Time]  : affected(t,x2,y) <- do(t,p_player,switch(x1,y)) & adj(x1,x2).
		! y1 [All] x [All] t [Time] y2 [All]  : affected(t,x,y2) <- do(t,p_player,switch(x,y1)) & adj(y2,y1).
		! y [All] x [All] t [Time]  : affected(t,x,y) <- do(t,p_player,switch(x,y)).
		! y1 [All] x [All] t [Time] y2 [All]  : affected(t,x,y2) <- do(t,p_player,switch(x,y1)) & adj(y1,y2).
		! y [All] x2 [All] x1 [All] t [Time]  : affected(t,x2,y) <- do(t,p_player,switch(x1,y)) & adj(x2,x1).
	}
	
	// Translation of the LEGAL sentences
	! y [All] x [All] t [Time]  : do(t,p_player,switch(x,y)) => coord(x) & coord(y).
	
	// Translation of the SCORE sentences
	{
		Score(p_player) = 100 <- ! t [Time]  : terminalTime(t) => ~lighton(t).
		Score(p_player) = 0 <- ! t [Time]  : terminalTime(t) => lighton(t).
	}
	
	// Translation of the TERMINAL sentences
	{
		! t [Time]  : terminalTime(t) <- ~lighton(t).
		! t [Time]  : terminalTime(t) <- step(t,i20).
	}
}
structure S : V {
	// Default structure elements:
	Start = 0
	Time = {0..20}
	ScoreType = {0..100}
	
	// Desired result
	Score = {p_player->100}
	
	// Initial values for the fluent predicates
	I_step = {i0}
	I_cell = {i5,i2,nolight;i1,i4,nolight;i5,i1,nolight;i2,i3,nolight;i2,i1,light;i3,i1,nolight;i5,i3,light;i2,i2,nolight;i3,i5,nolight;i3,i3,nolight;i1,i3,light;i4,i5,light;i4,i1,nolight;i4,i2,nolight;i4,i4,light;i1,i2,nolight;i4,i3,light;i1,i5,nolight;i2,i4,light;i1,i1,nolight;i2,i5,light;i5,i4,nolight;i3,i4,light;i5,i5,nolight;i3,i2,light}
	
	// All values found in the static predicates
	coord = {i4;i3;i5;i2;i1}
	nextstep = {i10,i11;i0,i1;i1,i2;i15,i16;i3,i4;i16,i17;i2,i3;i17,i18;i5,i6;i18,i19;i4,i5;i9,i10;i19,i20;i7,i8;i11,i12;i12,i13;i6,i7;i13,i14;i14,i15;i8,i9}
	adj = {i3,i4;i2,i3;i4,i5;i1,i2}
}
procedure main() {
	stdoptions.nbmodels=5
	printmodels(modelexpand(T,S))
}
