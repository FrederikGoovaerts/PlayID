include <LTC>

LTCvocabulary V {
	// Default vocabulary elements (and types needed by the default elements)
	type Time isa nat
	Start : Time
	partial Next(Time) : Time
	type All constructed from {i47,i48,i49,i43,i44,i45,i46,i40,i41,i42,i0,i5,i15,i6,i14,i7,i17,i8,i16,i1,i11,i10,i2,i3,i13,i4,i12,i58,i59,i18,i56,i9,i19,i57,i54,i55,i52,i53,i50,i51,i20,i24,i23,i22,i21,i28,i27,i26,i25,i29,i60,b,i31,i30,i33,i32,i35,i34,i37,i36,i39,i38}
	type Action constructed from {move(All,All)}
	terminalTime(Time)
	type ScoreType isa nat
	type Player constructed from {p_player}
	Score(Player) : ScoreType
	do(Time,Player,Action)
	
	// Vocabulary elements derived from GDL file
	succ(All,All)
	index(All)
	successor(All,All)
	tile(All)
	pred(All,All)
	inorder(Time)
	
	// LTC predicates for the fluent predicates
	cell(Time,All,All,All)
	I_cell(All,All,All)
	C_cell(Time,All,All,All)
	
	step(Time,All)
	I_step(All)
	C_step(Time,All)
	
}
theory T: V {
	// Default theory elements:
	! a [Action] t [Time] p [Player]  : do(t,p,a) => ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2).
	! p [Player] t [Time]  : ~terminalTime(t) & (? t2 [Time]  : Next(t) = t2) => (?=1 a [Action]  : do(t,p,a)).
	{
		! t [Time]  : Next(t) = t + 1 <- ~terminalTime(t) & (? t2 [Time]  : Next(t2) = t).
		Next(0) = 1.
	}
	
	// Inductive definitions for the fluent predicates
	{
		! a [All] a3 [All] a2 [All]  : cell(Start,a,a2,a3) <- I_cell(a,a2,a3).
		! a [All] a3 [All] t [Time] a2 [All]  : cell(Next(t),a,a2,a3) <- C_cell(t,a,a2,a3).
	}
	{
		! a [All]  : step(Start,a) <- I_step(a).
		! a [All] t [Time]  : step(Next(t),a) <- C_step(t,a).
	}
	
	// The fluent predicates' causations
	{
		! y [All] x [All] t [Time]  : C_step(t,x) <- step(t,y) & successor(y,x).
	}
	{
		! y [All] z [All] x [All] y1 [All] v [All] x1 [All] t [Time] u [All]  : C_cell(t,u,v,z) <- cell(t,u,v,z) & do(t,p_player,move(x,y)) & (x ~= u | y ~= v) & cell(t,x1,y1,b) & (x1 ~= u | y1 ~= v).
		! y [All] x [All] t [Time]  : C_cell(t,x,y,b) <- do(t,p_player,move(x,y)).
		! y [All] z [All] x [All] v [All] t [Time]  : C_cell(t,x,v,z) <- do(t,p_player,move(x,y)) & cell(t,x,v,b) & cell(t,x,y,z) & z ~= b.
		! y [All] z [All] x [All] t [Time] u [All]  : C_cell(t,u,y,z) <- do(t,p_player,move(x,y)) & cell(t,u,y,b) & cell(t,x,y,z) & z ~= b.
	}
	
	// The static predicates' causations
	{
		! t [Time]  : inorder(t) <- cell(t,i1,i1,i1) & cell(t,i1,i2,i2) & cell(t,i1,i3,i3) & cell(t,i2,i1,i4) & cell(t,i2,i2,i5) & cell(t,i2,i3,i6) & cell(t,i3,i1,i7) & cell(t,i3,i2,i8) & cell(t,i3,i3,b).
	}
	
	// Translation of the LEGAL sentences
	! y [All] x [All] t [Time] u [All]  : do(t,p_player,move(x,y)) => cell(t,u,y,b) & (succ(x,u) | pred(x,u)).
	! y [All] x [All] v [All] t [Time]  : do(t,p_player,move(x,y)) => cell(t,x,v,b) & (succ(y,v) | pred(y,v)).
	
	// Translation of the SCORE sentences
	{
		Score(p_player) = 100 <- ! t [Time]  : terminalTime(t) => inorder(t) & step(t,i30).
		Score(p_player) = 99 <- ! t [Time]  : terminalTime(t) => (? x [All]  : inorder(t) & step(t,x) & x ~= i30).
		Score(p_player) = 0 <- ! t [Time]  : terminalTime(t) => ~inorder(t).
	}
	
	// Translation of the TERMINAL sentences
	{
		! t [Time]  : terminalTime(t) <- inorder(t).
		! t [Time]  : terminalTime(t) <- step(t,i60).
	}
}
structure S : V {
	// Default structure elements:
	Start = 0
	Time = {0..20}
	ScoreType = {0..100}
	
	// Desired result
	Score = {p_player->100}
	
	// Initial values for the fluent predicates
	I_step = {i0}
	I_cell = {i3,i1,i2;i3,i3,b;i1,i3,i6;i2,i2,i4;i2,i1,i5;i1,i2,i7;i3,i2,i1;i1,i1,i8;i2,i3,i3}
	
	// All values found in the static predicates
	tile = {i4;i3;i6;i5;i8;i7;b;i2;i1}
	succ = {i2,i3;i1,i2}
	successor = {i51,i52;i37,i38;i59,i60;i10,i11;i46,i47;i33,i34;i0,i1;i23,i24;i18,i19;i4,i5;i55,i56;i27,i28;i42,i43;i14,i15;i8,i9;i38,i39;i52,i53;i47,i48;i34,i35;i1,i2;i22,i23;i30,i31;i17,i18;i5,i6;i56,i57;i26,i27;i13,i14;i43,i44;i44,i45;i53,i54;i29,i30;i48,i49;i21,i22;i35,i36;i39,i40;i16,i17;i2,i3;i31,i32;i25,i26;i19,i20;i40,i41;i12,i13;i6,i7;i57,i58;i45,i46;i54,i55;i36,i37;i50,i51;i20,i21;i15,i16;i3,i4;i24,i25;i32,i33;i9,i10;i7,i8;i11,i12;i41,i42;i58,i59;i28,i29;i49,i50}
	index = {i3;i2;i1}
	pred = {i2,i1;i3,i2}
}
procedure main() {
	stdoptions.nbmodels=5
	printmodels(modelexpand(T,S))
}
