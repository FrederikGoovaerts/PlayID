; Skirmish
; by Alex Landau
; 
; This is a version of Skirmish built on the Speed Chess ruleset.
;
; Scoring: The scoring system is the same as in other versions of Skirmish, i.e.
; 6 or 7 points are granted for each capture made (6 for the first 12 captures by
; each player, 7 for the last four captures).
;
; Ending conditions: The game ends when one player has no legal moves or the
; step counter ends (100 steps).

(role white)
(role black)

; Bases and inputs

(<= (base (control ?player))
    (role ?player))
(base (step 1))
(<= (base (step ?np1))
    (succ ?n ?np1))
(<= (base (captureCount ?player ?count))
    (role ?player)
    (scoreMap ?count ?goal))

(<= (base (cell ?x ?y ?player ?piece))
    (file ?x)
    (rank ?y)
    (role ?player)
    (pieceType ?piece))
(pieceType king)
(pieceType queen)
(pieceType rook)
(pieceType bishop)
(pieceType knight)
(<= (base (cell ?x ?y ?player pawn))
    (file ?x)
    (rank ?y)
    (distinct ?y 1)
    (distinct ?y 8)
    (role ?player))

(<= (base (canEnPassantCapture ?x))
    (file ?x))
(<= (base (kingHasMoved ?player))
    (role ?player))
(<= (base (aRookHasMoved ?player))
    (role ?player))
(<= (base (hRookHasMoved ?player))
    (role ?player))
    
(<= (input ?player noop)
    (role ?player))
(<= (input ?player castleKingside)
    (role ?player))
(<= (input ?player castleQueenside)
    (role ?player))
(<= (input ?player (move king ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (kingMove ?x1 ?y1 ?x2 ?y2))
(<= (input ?player (move knight ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (knightMove ?x1 ?y1 ?x2 ?y2))
(<= (input ?player (move bishop ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (diagonal ?dir)
    (alongDirection ?x1 ?y1 ?x2 ?y2 ?dir))
(<= (input ?player (move rook ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (straight ?dir)
    (alongDirection ?x1 ?y1 ?x2 ?y2 ?dir))
(<= (input ?player (move queen ?x1 ?y1 ?x2 ?y2))
    (role ?player)
    (dir ?dir)
    (alongDirection ?x1 ?y1 ?x2 ?y2 ?dir))
(<= (alongDirection ?x1 ?y1 ?x2 ?y2 ?dir)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?dir))
(<= (alongDirection ?x1 ?y1 ?x3 ?y3 ?dir)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?dir)
    (alongDirection ?x2 ?y2 ?x3 ?y3 ?dir))

; Pawn move type 1: Normal advancement (not to last rank)
(<= (input white (move pawn ?x ?y1 ?x ?y2))
    (oneInDir ?x ?y1 ?x ?y2 n)
    (distinct ?y2 8))
(<= (input black (move pawn ?x ?y1 ?x ?y2))
    (oneInDir ?x ?y1 ?x ?y2 s)
    (distinct ?y2 1))
; Pawn move type 2: Advance and promote
(<= (input white (move ?promotedType ?x 7 ?x 8))
    (file ?x)
    (promotableType ?promotedType))
(<= (input black (move ?promotedType ?x 2 ?x 1))
    (file ?x)
    (promotableType ?promotedType))
; Pawn move type 3: Capture (not to last rank)
(<= (input white (move pawn ?x1 ?y1 ?x2 ?y2))
    (or (oneInDir ?x1 ?y1 ?x2 ?y2 nw)
        (oneInDir ?x1 ?y1 ?x2 ?y2 ne))
    (distinct ?y2 8))
(<= (input black (move pawn ?x1 ?y1 ?x2 ?y2))
    (or (oneInDir ?x1 ?y1 ?x2 ?y2 sw)
        (oneInDir ?x1 ?y1 ?x2 ?y2 se))
    (distinct ?y2 1))
; Pawn move type 4: Capture and promote
(<= (input white (move ?promotedType ?x1 7 ?x2 8))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (promotableType ?promotedType))
(<= (input black (move ?promotedType ?x1 2 ?x2 1))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (promotableType ?promotedType))
; Pawn move type 5: Advance two from initial position
(<= (input white (move pawn ?x 2 ?x 4))
    (file ?x))
(<= (input black (move pawn ?x 7 ?x 5))
    (file ?x))


; Initial state

(init (control white))

(init (cell a 1 white rook))
(init (cell b 1 white knight))
(init (cell c 1 white bishop))
(init (cell d 1 white queen))
(init (cell e 1 white king))
(init (cell f 1 white bishop))
(init (cell g 1 white knight))
(init (cell h 1 white rook))
(init (cell a 2 white pawn))
(init (cell b 2 white pawn))
(init (cell c 2 white pawn))
(init (cell d 2 white pawn))
(init (cell e 2 white pawn))
(init (cell f 2 white pawn))
(init (cell g 2 white pawn))
(init (cell h 2 white pawn))
(init (cell a 7 black pawn))
(init (cell b 7 black pawn))
(init (cell c 7 black pawn))
(init (cell d 7 black pawn))
(init (cell e 7 black pawn))
(init (cell f 7 black pawn))
(init (cell g 7 black pawn))
(init (cell h 7 black pawn))
(init (cell a 8 black rook))
(init (cell b 8 black knight))
(init (cell c 8 black bishop))
(init (cell d 8 black queen))
(init (cell e 8 black king))
(init (cell f 8 black bishop))
(init (cell g 8 black knight))
(init (cell h 8 black rook))
(init (step 1))
(init (captureCount white 0))
(init (captureCount black 0))


; Which moves are legal?

(<= (legal ?player noop)
    (role ?player)
    (not (true (control ?player))))

(<= (legal ?player ?move)
    (true (control ?player))
    (legalMove ?player ?move))

; When is a move legal?
; 1) The board position suggests it's legal
; 2) The player has control
; 3) The piece being moved is not pinned, or is moving in the direction of the pin (ignored for this game)

(<= (legalMove ?player (move king ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player king))
    (kingMove ?x1 ?y1 ?x2 ?y2)
    (not (playerInCell ?player ?x2 ?y2)))
(<= (kingMove ?x1 ?y1 ?x2 ?y2)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?anyDir))

(<= (legalMove ?player (move knight ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player knight))
    (knightMove ?x1 ?y1 ?x2 ?y2)
    (not (playerInCell ?player ?x2 ?y2)))
(<= (knightMove ?x1 ?y1 ?x2 ?y3)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (knightMove ?x2 ?y1 ?x1 ?y3)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (knightMove ?x1 ?y3 ?x2 ?y1)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (knightMove ?x2 ?y3 ?x1 ?y1)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2)
    (nextRank ?y2 ?y3))
(<= (knightMove ?x1 ?y1 ?x3 ?y2)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y1 ?y2))
(<= (knightMove ?x1 ?y2 ?x3 ?y1)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y1 ?y2))
(<= (knightMove ?x3 ?y1 ?x1 ?y2)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y1 ?y2))
(<= (knightMove ?x3 ?y2 ?x1 ?y1)
    (nextFile ?x1 ?x2)
    (nextFile ?x2 ?x3)
    (nextRank ?y1 ?y2))

; Bishops, rooks, queens...
(<= (legalMove ?player (move bishop ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player bishop))
    (diagonal ?dir)
    (openBetween ?x1 ?y1 ?x2 ?y2 ?dir)
    (not (playerInCell ?player ?x2 ?y2)))
(<= (legalMove ?player (move rook ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player rook))
    (straight ?dir)
    (openBetween ?x1 ?y1 ?x2 ?y2 ?dir)
    (not (playerInCell ?player ?x2 ?y2)))
(<= (legalMove ?player (move queen ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 ?player queen))
    (dir ?dir)
    (openBetween ?x1 ?y1 ?x2 ?y2 ?dir)
    (not (playerInCell ?player ?x2 ?y2)))

; (openStretch ?x1 ?y1 ?x2 ?y2 ?dir) indicates that the spaces between 1 and 2 are
; empty, including 1 and 2, and that 2 is in direction ?dir from 1. openBetween
; is similar, except that the spaces 1 and 2 themselves may be occupied. 
(<= (openStretch ?x ?y ?x ?y ?dir)
    (file ?x)
    (rank ?y)
    (not (occupied ?x ?y))
    (dir ?dir))
(<= (openStretch ?x1 ?y1 ?x3 ?y3 ?dir)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?dir)
    (not (occupied ?x1 ?y1))
    (openStretch ?x2 ?y2 ?x3 ?y3 ?dir))
(<= (openBetween ?x1 ?y1 ?x2 ?y2 ?dir)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?dir))
(<= (openBetween ?x1 ?y1 ?x4 ?y4 ?dir)
    (oneInDir ?x1 ?y1 ?x2 ?y2 ?dir)
    (openStretch ?x2 ?y2 ?x3 ?y3 ?dir)
    (oneInDir ?x3 ?y3 ?x4 ?y4 ?dir))

(<= (occupied ?x ?y)
    (true (cell ?x ?y ?player ?piece)))    

; Then pawns
; Pawn move type 1: Normal advancement (not to last rank)
(<= (legalMove white (move pawn ?x ?y1 ?x ?y2))
    (true (cell ?x ?y1 white pawn))
    (oneInDir ?x ?y1 ?x ?y2 n)
    (distinct ?y2 8)
    (not (occupied ?x ?y2)))
(<= (legalMove black (move pawn ?x ?y1 ?x ?y2))
    (true (cell ?x ?y1 black pawn))
    (oneInDir ?x ?y1 ?x ?y2 s)
    (distinct ?y2 1)
    (not (occupied ?x ?y2)))
; Pawn move type 2: Advance and promote
(<= (legalMove white (move ?promotedType ?x 7 ?x 8))
    (true (cell ?x 7 white pawn))
    (not (occupied ?x 8))
    (promotableType ?promotedType))
(<= (legalMove black (move ?promotedType ?x 2 ?x 1))
    (true (cell ?x 2 black pawn))
    (not (occupied ?x 1))
    (promotableType ?promotedType))
; Pawn move type 3: Capture (not to last rank)
(<= (legalMove white (move pawn ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 white pawn))
    (or (oneInDir ?x1 ?y1 ?x2 ?y2 nw)
        (oneInDir ?x1 ?y1 ?x2 ?y2 ne))
    (distinct ?y2 8)
    (playerInCell black ?x2 ?y2))
(<= (legalMove black (move pawn ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x1 ?y1 black pawn))
    (or (oneInDir ?x1 ?y1 ?x2 ?y2 sw)
        (oneInDir ?x1 ?y1 ?x2 ?y2 se))
    (distinct ?y2 1)
    (playerInCell white ?x2 ?y2))
; Pawn move type 4: Capture and promote
(<= (legalMove white (move ?promotedType ?x1 7 ?x2 8))
    (true (cell ?x1 7 white pawn))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (playerInCell black ?x2 8)
    (promotableType ?promotedType))
(<= (legalMove black (move ?promotedType ?x1 2 ?x2 1))
    (true (cell ?x1 2 black pawn))
    (or (nextFile ?x1 ?x2)
        (nextFile ?x2 ?x1))
    (playerInCell white ?x2 1)
    (promotableType ?promotedType))
; Pawn move type 5: Advance two from initial position
(<= (legalMove white (move pawn ?x 2 ?x 4))
    (true (cell ?x 2 white pawn))
    (not (occupied ?x 3))
    (not (occupied ?x 4)))
(<= (legalMove black (move pawn ?x 7 ?x 5))
    (true (cell ?x 7 black pawn))
    (not (occupied ?x 6))
    (not (occupied ?x 5)))
; Pawn move type 6: En passant capture
(<= (legalMove white (move pawn ?x1 5 ?x2 6))
    (true (cell ?x1 5 white pawn))
    (or (oneInDir ?x1 5 ?x2 6 nw)
        (oneInDir ?x1 5 ?x2 6 ne))
    (true (canEnPassantCapture ?x2)))
(<= (legalMove black (move pawn ?x1 4 ?x2 3))
    (true (cell ?x1 4 black pawn))
    (or (oneInDir ?x1 4 ?x2 3 sw)
        (oneInDir ?x1 4 ?x2 3 se))
    (true (canEnPassantCapture ?x2)))

; Castling

(<= (legalMove white castleKingside)
    (true (cell e 1 white king))
    (not (true (kingHasMoved white)))
    (true (cell h 1 white rook))
    (not (true (hRookHasMoved white)))
    (not (occupied f 1))
    (not (occupied g 1)))
(<= (legalMove black castleKingside)
    (true (cell e 8 black king))
    (not (true (kingHasMoved black)))
    (true (cell h 8 black rook))
    (not (true (hRookHasMoved black)))
    (not (occupied f 8))
    (not (occupied g 8)))
(<= (legalMove white castleQueenside)
    (true (cell e 1 white king))
    (not (true (kingHasMoved white)))
    (true (cell a 1 white rook))
    (not (true (aRookHasMoved white)))
    (not (occupied b 1))
    (not (occupied c 1))
    (not (occupied d 1)))
(<= (legalMove black castleQueenside)
    (true (cell e 8 black king))
    (not (true (kingHasMoved black)))
    (true (cell a 8 black rook))
    (not (true (aRookHasMoved black)))
    (not (occupied b 8))
    (not (occupied c 8))
    (not (occupied d 8)))

(<= (playerInCell ?player ?x ?y)
    (true (cell ?x ?y ?player ?piece)))

; Next state logic

(<= (next (control ?opponent))
    (true (control ?player))
    (opponent ?player ?opponent))
(<= (next (step ?np1))
    (true (step ?n))
    (succ ?n ?np1))

; Cells: Pieces stay where they are unless they're affected by the given move.
; Castling and en passant have special rules for what's affected.

(<= (next (cell ?x ?y ?player ?piece))
    (true (cell ?x ?y ?player ?piece))
    (not (affected ?x ?y)))
(<= (affected ?x1 ?y1)
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2)))
(<= (affected ?x2 ?y2)
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2)))
(<= (affected e 1)
    (does white castleKingside))
(<= (affected h 1)
    (does white castleKingside))
(<= (affected e 1)
    (does white castleQueenside))
(<= (affected a 1)
    (does white castleQueenside))
(<= (affected e 8)
    (does black castleKingside))
(<= (affected h 8)
    (does black castleKingside))
(<= (affected e 8)
    (does black castleQueenside))
(<= (affected a 8)
    (does black castleQueenside))
; En passant captures cause the instigating pawn to be captured.
(<= (affected ?x2 5)
    (does white (move pawn ?x1 5 ?x2 6))
    (true (canEnPassantCapture ?x2)))
(<= (affected ?x2 4)
    (does black (move pawn ?x1 4 ?x2 3))
    (true (canEnPassantCapture ?x2)))
; Moves cause the listed piece to end up in the later position.
; In the case of promoted pawns, the move will list the promoted type.
(<= (next (cell ?x2 ?y2 ?player ?piece))
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2)))
(<= (next (cell g 1 white king))
    (does white castleKingside))
(<= (next (cell f 1 white rook))
    (does white castleKingside))
(<= (next (cell c 1 white king))
    (does white castleQueenside))
(<= (next (cell d 1 white rook))
    (does white castleQueenside))
(<= (next (cell g 8 black king))
    (does black castleKingside))
(<= (next (cell f 8 black rook))
    (does black castleKingside))
(<= (next (cell c 8 black king))
    (does black castleQueenside))
(<= (next (cell d 8 black rook))
    (does black castleQueenside))

(<= (next (canEnPassantCapture ?x))
    (does white (move pawn ?x 2 ?x 4)))
(<= (next (canEnPassantCapture ?x))
    (does black (move pawn ?x 7 ?x 5)))

(<= (next (kingHasMoved ?player))
    (true (kingHasMoved ?player)))
(<= (next (kingHasMoved ?player))
    (does ?player (move king e ?y1 ?x2 ?y2)))
(<= (next (aRookHasMoved ?player))
    (true (aRookHasMoved ?player)))
(<= (next (aRookHasMoved white))
    (does white (move rook a 1 ?x2 ?y2)))
(<= (next (aRookHasMoved black))
    (does black (move rook a 8 ?x2 ?y2)))
(<= (next (hRookHasMoved ?player))
    (true (hRookHasMoved ?player)))
(<= (next (hRookHasMoved white))
    (does white (move rook h 1 ?x2 ?y2)))
(<= (next (hRookHasMoved black))
    (does black (move rook h 8 ?x2 ?y2)))

; Increment the captureCount if a piece was captured.
(<= (captureMade ?capturer)
    (true (control ?capturer))
    (opponent ?capturer ?victim)
    (affected ?x ?y)
    (true (cell ?x ?y ?victim ?piece)))
(<= (next (captureCount ?player ?np1))
    (true (captureCount ?player ?n))
    (captureMade ?player)
    (succ ?n ?np1))
(<= (next (captureCount ?player ?n))
    (true (captureCount ?player ?n))
    (not (captureMade ?player)))


; Terminality and goal values
(<= terminal
    (true (step 101)))
(<= terminal
    (true (control ?player))
    (not (hasAnyLegalMove ?player)))
(<= (hasAnyLegalMove ?player)
    (legalMove ?player ?move))
(<= (goal ?player ?goal)
    (role ?player)
    (true (captureCount ?player ?count))
    (scoreMap ?count ?goal))

; Constants

(opponent white black)
(opponent black white)

(file a)
(file b)
(file c)
(file d)
(file e)
(file f)
(file g)
(file h)
(nextFile a b)
(nextFile b c)
(nextFile c d)
(nextFile d e)
(nextFile e f)
(nextFile f g)
(nextFile g h)
(rank 1)
(rank 2)
(rank 3)
(rank 4)
(rank 5)
(rank 6)
(rank 7)
(rank 8)
(nextRank 1 2)
(nextRank 2 3)
(nextRank 3 4)
(nextRank 4 5)
(nextRank 5 6)
(nextRank 6 7)
(nextRank 7 8)


(dir n)
(dir s)
(dir e)
(dir w)
(dir nw)
(dir ne)
(dir se)
(dir sw)
(straight n)
(straight s)
(straight e)
(straight w)
(diagonal nw)
(diagonal ne)
(diagonal se)
(diagonal sw)

(<= (oneInDir ?x ?y1 ?x ?y2 n)
    (file ?x)
    (nextRank ?y1 ?y2))
(<= (oneInDir ?x1 ?y1 ?x2 ?y2 ne)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2))
(<= (oneInDir ?x1 ?y ?x2 ?y e)
    (nextFile ?x1 ?x2)
    (rank ?y))
(<= (oneInDir ?x1 ?y2 ?x2 ?y1 se)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2))
(<= (oneInDir ?x ?y2 ?x ?y1 s)
    (file ?x)
    (nextRank ?y1 ?y2))
(<= (oneInDir ?x2 ?y2 ?x1 ?y1 sw)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2))
(<= (oneInDir ?x2 ?y ?x1 ?y w)
    (nextFile ?x1 ?x2)
    (rank ?y))
(<= (oneInDir ?x2 ?y1 ?x1 ?y2 nw)
    (nextFile ?x1 ?x2)
    (nextRank ?y1 ?y2))
    
(promotableType queen)
(promotableType knight)
(promotableType rook)
(promotableType bishop)

(scoreMap  0   0)
(scoreMap  1   6)
(scoreMap  2  12)
(scoreMap  3  18)
(scoreMap  4  24)
(scoreMap  5  30)
(scoreMap  6  36)
(scoreMap  7  42)
(scoreMap  8  48)
(scoreMap  9  54)
(scoreMap 10  60)
(scoreMap 11  66)
(scoreMap 12  72)
(scoreMap 13  79)
(scoreMap 14  86)
(scoreMap 15  93)
(scoreMap 16 100)

; Successor function for the step counter and capture count
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)
(succ 50 51)
(succ 51 52)
(succ 52 53)
(succ 53 54)
(succ 54 55)
(succ 55 56)
(succ 56 57)
(succ 57 58)
(succ 58 59)
(succ 59 60)
(succ 60 61)
(succ 61 62)
(succ 62 63)
(succ 63 64)
(succ 64 65)
(succ 65 66)
(succ 66 67)
(succ 67 68)
(succ 68 69)
(succ 69 70)
(succ 70 71)
(succ 71 72)
(succ 72 73)
(succ 73 74)
(succ 74 75)
(succ 75 76)
(succ 76 77)
(succ 77 78)
(succ 78 79)
(succ 79 80)
(succ 80 81)
(succ 81 82)
(succ 82 83)
(succ 83 84)
(succ 84 85)
(succ 85 86)
(succ 86 87)
(succ 87 88)
(succ 88 89)
(succ 89 90)
(succ 90 91)
(succ 91 92)
(succ 92 93)
(succ 93 94)
(succ 94 95)
(succ 95 96)
(succ 96 97)
(succ 97 98)
(succ 98 99)
(succ 99 100)
(succ 100 101)
