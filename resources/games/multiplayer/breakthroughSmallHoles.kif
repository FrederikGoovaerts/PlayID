;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Breakthrough (6x6 with holes)
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLE Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role white)
(role black)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INIT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (init (cell ?x ?y hole))
    (holeCell ?x ?y))

(holeCell 2 3)
(holeCell 3 4)
(holeCell 4 3)
(holeCell 5 4)

(init (cell 1 1 white))
(init (cell 2 1 white))
(init (cell 3 1 white))
(init (cell 4 1 white))
(init (cell 5 1 white))
(init (cell 6 1 white))
(init (cell 1 2 white))
(init (cell 2 2 white))
(init (cell 3 2 white))
(init (cell 4 2 white))
(init (cell 5 2 white))
(init (cell 6 2 white))

(init (cell 1 5 black))
(init (cell 2 5 black))
(init (cell 3 5 black))
(init (cell 4 5 black))
(init (cell 5 5 black))
(init (cell 6 5 black))
(init (cell 1 6 black))
(init (cell 2 6 black))
(init (cell 3 6 black))
(init (cell 4 6 black))
(init (cell 5 6 black))
(init (cell 6 6 black))

(init (control white))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LEGAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal ?player ?move)
    (legal2 ?player ?move))
(<= (hasAnyLegalMove ?player)
    (legal2 ?player ?move))

(<= (legal2 white (move ?x ?y1 ?x ?y2))
    (true (control white))
    (true (cell ?x ?y1 white))
    (plusplus ?y1 ?y2)
    (not (true (cell ?x ?y2 white)))
    (not (true (cell ?x ?y2 black)))
    (not (true (cell ?x ?y2 hole))))
(<= (legal2 white (move ?x1 ?y1 ?x2 ?y2))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (plusplus ?y1 ?y2)
    (plusplus ?x1 ?x2)
    (not (true (cell ?x2 ?y2 white)))
    (not (true (cell ?x2 ?y2 hole))))
(<= (legal2 white (move ?x1 ?y1 ?x2 ?y2))
    (true (control white))
    (true (cell ?x1 ?y1 white))
    (plusplus ?y1 ?y2)
    (plusplus ?x2 ?x1)
    (not (true (cell ?x2 ?y2 white)))
    (not (true (cell ?x2 ?y2 hole))))

(<= (legal2 black (move ?x ?y1 ?x ?y2))
    (true (control black))
    (true (cell ?x ?y1 black))
    (plusplus ?y2 ?y1)
    (not (true (cell ?x ?y2 white)))
    (not (true (cell ?x ?y2 black)))
    (not (true (cell ?x ?y2 hole))))
(<= (legal2 black (move ?x1 ?y1 ?x2 ?y2))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (plusplus ?y2 ?y1)
    (plusplus ?x1 ?x2)
    (not (true (cell ?x2 ?y2 black)))
    (not (true (cell ?x2 ?y2 hole))))
(<= (legal2 black (move ?x1 ?y1 ?x2 ?y2))
    (true (control black))
    (true (cell ?x1 ?y1 black))
    (plusplus ?y2 ?y1)
    (plusplus ?x2 ?x1)
    (not (true (cell ?x2 ?y2 black)))
    (not (true (cell ?x2 ?y2 hole))))
    
(<= (legal2 white noop)
    (true (control black)))
    
(<= (legal2 black noop)
    (true (control white)))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NEXT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
(<= (next (cell ?x2 ?y2 ?player))
    (does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (next (cell ?x ?y ?state))
    (true (cell ?x ?y ?state))
    (not (cameFrom ?x ?y))
    (not (wentTo ?x ?y)))
    
(<= (next (cell ?x ?y hole))
	(true (cell ?x ?y hole)))
    
(<= (next (control white))
    (true (control black)))
(<= (next (control black))
    (true (control white)))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TERMINAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal 
    whiteWin)
(<= terminal
    blackWin)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GOAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal white 100)
    whiteWin)
(<= (goal white 0)
    (not whiteWin))
    
(<= (goal black 100)
    blackWin)
(<= (goal black 0)
    (not blackWin))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; View Definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (cameFrom ?x1 ?y1)
	(does ?player (move ?x1 ?y1 ?x2 ?y2)))
(<= (wentTo ?x2 ?y2)
	(does ?player (move ?x1 ?y1 ?x2 ?y2)))

(<= whiteWin
    (index ?x)
    (true (cell ?x 6 white)))
(<= blackWin
    (index ?x)
    (true (cell ?x 1 black)))

(<= whiteWin
    (true (control black))
    (not (hasAnyLegalMove black)))
(<= blackWin
    (true (control white))
    (not (hasAnyLegalMove white)))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Static Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(index 1) (index 2) (index 3) (index 4) (index 5) (index 6)
(plusplus 1 2)  (plusplus 2 3)  (plusplus 3 4)  (plusplus 4 5)  (plusplus 5 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Bases and inputs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (base (cell ?x ?y ?player))
	(index ?x)
	(index ?y)
	(not (holeCell ?x ?y))
	(role ?player))
(<= (base (control ?player))
	(role ?player))
(<= (base (cell ?x ?y hole))
    (holeCell ?x ?y))
	
(<= (input white (move ?x ?y1 ?x ?y2))
	(index ?x)
    (plusplus ?y1 ?y2)
    (not (holeCell ?x ?y1))
    (not (holeCell ?x ?y2)))
(<= (input white (move ?x1 ?y1 ?x2 ?y2))
    (plusplus ?y1 ?y2)
    (plusplus ?x1 ?x2)
    (not (holeCell ?x1 ?y1))
    (not (holeCell ?x2 ?y2)))
(<= (input white (move ?x1 ?y1 ?x2 ?y2))
    (plusplus ?y1 ?y2)
    (plusplus ?x2 ?x1)
    (not (holeCell ?x1 ?y1))
    (not (holeCell ?x2 ?y2)))

(<= (input black (move ?x ?y1 ?x ?y2))
	(index ?x)
    (plusplus ?y2 ?y1)
    (not (holeCell ?x ?y1))
    (not (holeCell ?x ?y2)))
(<= (input black (move ?x1 ?y1 ?x2 ?y2))
    (plusplus ?y2 ?y1)
    (plusplus ?x1 ?x2)
    (not (holeCell ?x1 ?y1))
    (not (holeCell ?x2 ?y2)))
(<= (input black (move ?x1 ?y1 ?x2 ?y2))
    (plusplus ?y2 ?y1)
    (plusplus ?x2 ?x1)
    (not (holeCell ?x1 ?y1))
    (not (holeCell ?x2 ?y2)))
	
(<= (input ?player noop)
	(role ?player))
