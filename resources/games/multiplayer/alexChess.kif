;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Chess, re-implemented by Alex Landau  ;;
;;                                       ;;
;;       (not completely tested)         ;;
;; Last modified by Alex Landau, 2/27/11 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Piece Locations

(nextRank 1 2)
(nextRank 2 3)
(nextRank 3 4)
(nextRank 4 5)
(nextRank 5 6)
(nextRank 6 7)
(nextRank 7 8)

(<= (rank ?a)
    (nextRank ?a ?b))
(<= (rank ?b)
    (nextRank ?a ?b))
    
(nextFile a b)
(nextFile b c)
(nextFile c d)
(nextFile d e)
(nextFile e f)
(nextFile f g)
(nextFile g h)

(<= (file ?a)
    (nextFile ?a ?b))
(<= (file ?b)
    (nextFile ?a ?b))

;Now let's have the piece locations

(init (piece wra a 1)) ;white rook that starts on file a
(init (piece wnb b 1))
(init (piece wbc c 1))
(init (piece wq d 1))
(init (piece wk e 1))
(init (piece wbf f 1))
(init (piece wng g 1))
(init (piece wrh h 1))

(init (piece wpa a 2))
(init (piece wpb b 2))
(init (piece wpc c 2))
(init (piece wpd d 2))
(init (piece wpe e 2))
(init (piece wpf f 2))
(init (piece wpg g 2))
(init (piece wph h 2))

(init (piece bra a 8))
(init (piece bnb b 8))
(init (piece bbc c 8))
(init (piece bq d 8))
(init (piece bk e 8))
(init (piece bbf f 8))
(init (piece bng g 8))
(init (piece brh h 8))

(init (piece bpa a 7))
(init (piece bpb b 7))
(init (piece bpc c 7))
(init (piece bpd d 7))
(init (piece bpe e 7))
(init (piece bpf f 7))
(init (piece bpg g 7))
(init (piece bph h 7))

(role white)
(role black)

(owner white wra)
(owner white wnb)
(owner white wbc)
(owner white wq)
(owner white wk)
(owner white wbf)
(owner white wng)
(owner white wrh)
(owner white wpa)
(owner white wpb)
(owner white wpc)
(owner white wpd)
(owner white wpe)
(owner white wpf)
(owner white wpg)
(owner white wph)
(owner black bra)
(owner black bnb)
(owner black bbc)
(owner black bq)
(owner black bk)
(owner black bbf)
(owner black bng)
(owner black brh)
(owner black bpa)
(owner black bpb)
(owner black bpc)
(owner black bpd)
(owner black bpe)
(owner black bpf)
(owner black bpg)
(owner black bph)

(istype wra rook)
(istype wrh rook)
(istype bra rook)
(istype brh rook)
(istype wnb knight)
(istype wng knight)
(istype bnb knight)
(istype bng knight)
(istype wbc bishop)
(istype wbf bishop)
(istype bbc bishop)
(istype bbf bishop)
(istype wk king)
(istype bk king)
(istype wq queen)
(istype bq queen)
(istype wpa pawn)
(istype wpb pawn)
(istype wpc pawn)
(istype wpd pawn)
(istype wpe pawn)
(istype wpf pawn)
(istype wpg pawn)
(istype wph pawn)
(istype bpa pawn)
(istype bpb pawn)
(istype bpc pawn)
(istype bpd pawn)
(istype bpe pawn)
(istype bpf pawn)
(istype bpg pawn)
(istype bph pawn)
; istype declarations for promoted pieces are listed later

(<= (piecename ?piece)
    (true (piece ?piece ?x ?y)))

(<= (ownsPieceIn ?player ?x ?y)
	(true (piece ?piece ?x ?y))
	(owner ?player ?piece)) 

(<= (nonempty ?x ?y)
	(ownsPieceIn ?player ?x ?y))

(<= (empty ?x ?y)
    (file ?x)
    (rank ?y)
    (not (nonempty ?x ?y)))
    
(piecetype rook)
(piecetype knight)
(piecetype bishop)
(piecetype king)
(piecetype queen)
(piecetype pawn) ;I'm not being too picky about chess terminology here...

;base cases for nextPieceDir
(<= (nextPieceN ?piece ?x ?y) ;north: higher rank
    (true (piece ?piece ?x ?yplus1))
    (nextRank ?y ?yplus1))
(<= (nextPieceNE ?piece ?x ?y) ;east: higher file
    (true (piece ?piece ?xplus1 ?yplus1))
    (nextFile ?x ?xplus1)
    (nextRank ?y ?yplus1))
(<= (nextPieceE ?piece ?x ?y) ;east: higher file
    (true (piece ?piece ?xplus1 ?y))
    (nextFile ?x ?xplus1))
(<= (nextPieceSE ?piece ?x ?y) ;south: lower rank
    (true (piece ?piece ?xplus1 ?yminus1))
    (nextFile ?x ?xplus1)
    (nextRank ?yminus1 ?y))    
(<= (nextPieceS ?piece ?x ?y) ;south: lower rank
    (true (piece ?piece ?x ?yminus1))
    (nextRank ?yminus1 ?y))    
(<= (nextPieceSW ?piece ?x ?y) ;west: lower file
    (true (piece ?piece ?xminus1 ?yminus1))
    (nextFile ?xminus1 ?x)
    (nextRank ?yminus1 ?y))    
(<= (nextPieceW ?piece ?x ?y) ;west: lower file
    (true (piece ?piece ?xminus1 ?y))
    (nextFile ?xminus1 ?x))    
(<= (nextPieceNW ?piece ?x ?y) ;north: higher rank
    (true (piece ?piece ?xminus1 ?yplus1))
    (nextFile ?xminus1 ?x)
    (nextRank ?y ?yplus1))
;recursive cases for nextPieceDir
(<= (nextPieceN ?piece ?x ?y) ;north: higher rank
    (nextPieceN ?piece ?x ?yplus1)
    (empty ?x ?yplus1)
    (nextRank ?y ?yplus1))
(<= (nextPieceNE ?piece ?x ?y) ;east: higher file
    (nextPieceNE ?piece ?xplus1 ?yplus1)
    (empty ?xplus1 ?yplus1)
    (nextFile ?x ?xplus1)
    (nextRank ?y ?yplus1))
(<= (nextPieceE ?piece ?x ?y) ;east: higher file
    (nextPieceE ?piece ?xplus1 ?y)
    (empty ?xplus1 ?y)
    (nextFile ?x ?xplus1))
(<= (nextPieceSE ?piece ?x ?y) ;south: lower rank
    (nextPieceSE ?piece ?xplus1 ?yminus1)
    (empty ?xplus1 ?yminus1)
    (nextFile ?x ?xplus1)
    (nextRank ?yminus1 ?y))    
(<= (nextPieceS ?piece ?x ?y) ;south: lower rank
    (nextPieceS ?piece ?x ?yminus1)
    (empty ?x ?yminus1)
    (nextRank ?yminus1 ?y))    
(<= (nextPieceSW ?piece ?x ?y) ;west: lower file
    (nextPieceSW ?piece ?xminus1 ?yminus1)
    (empty ?xminus1 ?yminus1)
    (nextFile ?xminus1 ?x)
    (nextRank ?yminus1 ?y))    
(<= (nextPieceW ?piece ?x ?y) ;west: lower file
    (nextPieceW ?piece ?xminus1 ?y)
    (empty ?xminus1 ?y)
    (nextFile ?xminus1 ?x))    
(<= (nextPieceNW ?piece ?x ?y) ;north: higher rank
    (nextPieceNW ?piece ?xminus1 ?yplus1)
    (empty ?xminus1 ?yplus1)
    (nextFile ?xminus1 ?x)
    (nextRank ?y ?yplus1))

;Describe all the types of knight moves in a constant sentence form
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?u ?w)
	(nextFile ?w ?x)
	(nextRank ?v ?y))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?x ?w)
	(nextFile ?w ?u)
	(nextRank ?v ?y))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?u ?w)
	(nextFile ?w ?x)
	(nextRank ?y ?v))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?x ?w)
	(nextFile ?w ?u)
	(nextRank ?y ?v))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?u ?x)
	(nextRank ?v ?w)
	(nextRank ?w ?y))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?u ?x)
	(nextRank ?y ?w)
	(nextRank ?w ?v))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?x ?u)
	(nextRank ?v ?w)
	(nextRank ?w ?y))
(<= (knightMove ?u ?v ?x ?y)
	(nextFile ?x ?u)
	(nextRank ?y ?w)
	(nextRank ?w ?v))
	    
	    
;legal0: These are moves where, if we didn't have to worry about check at all, they
; would be legal. That means they aren't moving through other pieces or ending up
; in the square of a piece with the same owner. For the king, this means we don't
; care yet if it's moving into check.
;Sentence format: (legal0 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
;Exact identity of the piece won't matter after this point; we can find it with the
;location it's moving from, anyway
; (x0, y0) is the old space, (x1, y1) is the new space being moved into.
; ?dir is either a direction (NtoS, WtoE, NWtoSE, NEtoSW) in which check may happen,
;      or the value "jump" for knight moves. This is used to determine if a move
;      by a pinned piece is valid.
;Rook moves
(<= (legal0 ?player rook ?x ?y0 ?x ?y1 NtoS)
	(true (control ?player))
	(istype ?piece rook)
	(owner ?player ?piece)
	(true (piece ?piece ?x ?y0))
	(or (nextPieceN ?piece ?x ?y1)
	    (nextPieceS ?piece ?x ?y1))
	(not (ownsPieceIn ?player ?x ?y1)))
(<= (legal0 ?player rook ?x0 ?y ?x1 ?y WtoE)
	(true (control ?player))
	(istype ?piece rook)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y))
	(or (nextPieceW ?piece ?x1 ?y)
		(nextPieceE ?piece ?x1 ?y))
	(not (ownsPieceIn ?player ?x1 ?y)))
;Bishop moves
(<= (legal0 ?player bishop ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control ?player))
	(istype ?piece bishop)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(or (nextPieceNW ?piece ?x1 ?y1)
		(nextPieceSE ?piece ?x1 ?y1))
	(not (ownsPieceIn ?player ?x1 ?y1)))
(<= (legal0 ?player bishop ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control ?player))
	(istype ?piece bishop)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(or (nextPieceNE ?piece ?x1 ?y1)
		(nextPieceSW ?piece ?x1 ?y1))
	(not (ownsPieceIn ?player ?x1 ?y1)))
;Queen moves
(<= (legal0 ?player queen ?x ?y0 ?x ?y1 NtoS)
	(true (control ?player))
	(istype ?piece queen)
	(owner ?player ?piece)
	(true (piece ?piece ?x ?y0))
	(or (nextPieceN ?piece ?x ?y1)
	    (nextPieceS ?piece ?x ?y1))
	(not (ownsPieceIn ?player ?x ?y1)))
(<= (legal0 ?player queen ?x0 ?y ?x1 ?y WtoE)
	(true (control ?player))
	(istype ?piece queen)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y))
	(or (nextPieceW ?piece ?x1 ?y)
		(nextPieceE ?piece ?x1 ?y))
	(not (ownsPieceIn ?player ?x1 ?y)))
(<= (legal0 ?player queen ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control ?player))
	(istype ?piece queen)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(or (nextPieceNW ?piece ?x1 ?y1)
		(nextPieceSE ?piece ?x1 ?y1))
	(not (ownsPieceIn ?player ?x1 ?y1)))
(<= (legal0 ?player queen ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control ?player))
	(istype ?piece queen)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(or (nextPieceNE ?piece ?x1 ?y1)
		(nextPieceSW ?piece ?x1 ?y1))
	(not (ownsPieceIn ?player ?x1 ?y1)))
;Knight moves
(<= (legal0 ?player knight ?x0 ?y0 ?x1 ?y1 jump)
	(true (control ?player))
	(istype ?piece knight)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(knightMove ?x0 ?y0 ?x1 ?y1)
	(not (ownsPieceIn ?player ?x1 ?y1)))
;King moves
(<= (legal0 ?player king ?x ?y0 ?x ?y1 NtoS)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x ?y0))
	(or (nextRank ?y0 ?y1)
		(nextRank ?y1 ?y0))
	(not (ownsPieceIn ?player ?x ?y1)))
(<= (legal0 ?player king ?x0 ?y ?x1 ?y WtoE)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y))
	(or (nextFile ?x0 ?x1)
		(nextFile ?x1 ?x0))
	(not (ownsPieceIn ?player ?x1 ?y)))
(<= (legal0 ?player king ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextFile ?x0 ?x1)
	(nextRank ?y1 ?y0)
	(not (ownsPieceIn ?player ?x1 ?y1)))
(<= (legal0 ?player king ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextFile ?x1 ?x0)
	(nextRank ?y0 ?y1)
	(not (ownsPieceIn ?player ?x1 ?y1)))
(<= (legal0 ?player king ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextFile ?x1 ?x0)
	(nextRank ?y1 ?y0)
	(not (ownsPieceIn ?player ?x1 ?y1)))
(<= (legal0 ?player king ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control ?player))
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextFile ?x0 ?x1)
	(nextRank ?y0 ?y1)
	(not (ownsPieceIn ?player ?x1 ?y1)))
;Pawn moves could be the hardest...
;Moving forward is always legal. We take care of the pawn promotion bit at the end
;of the chain of "legal" statements
;white goes northward, from low rank to high
(<= (legal0 white pawn ?x ?y0 ?x ?y1 NtoS)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x ?y0))
	(nextRank ?y0 ?y1)
	(empty ?x ?y1))
;Can also go forward two spaces
(<= (legal0 white pawn ?x 2 ?x 4 NtoS)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x 2))
	(empty ?x 3)
	(empty ?x 4))
;Capture to the left
(<= (legal0 white pawn ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextRank ?y0 ?y1)
	(nextFile ?x1 ?x0)
	(ownsPieceIn black ?x1 ?y1))
;Capture to the right
(<= (legal0 white pawn ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextRank ?y0 ?y1)
	(nextFile ?x0 ?x1)
	(ownsPieceIn black ?x1 ?y1))
;en-passant to the left (yep, we still have to worry about check)
(<= (legal0 white pawn ?x0 5 ?x1 6 NWtoSE)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x0 5))
	(nextFile ?x1 ?x0)
	(true (canEnPassantInFile ?x1))) ;ensures the space is empty
;en-passant to the right
(<= (legal0 white pawn ?x0 5 ?x1 6 NEtoSW)
	(true (control white))
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?x0 5))
	(nextFile ?x0 ?x1)
	(true (canEnPassantInFile ?x1))) ;ensures the space is empty
;Now, for the black pawns.
;black goes southward, from high rank to low
(<= (legal0 black pawn ?x ?y0 ?x ?y1 NtoS)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x ?y0))
	(nextRank ?y1 ?y0)
	(empty ?x ?y1))
;Can also go forward two spaces
(<= (legal0 black pawn ?x 7 ?x 5 NtoS)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x 7))
	(empty ?x 6)
	(empty ?x 5))
;Capture to the left (from black's perspective)
(<= (legal0 black pawn ?x0 ?y0 ?x1 ?y1 NWtoSE)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextRank ?y1 ?y0)
	(nextFile ?x0 ?x1)
	(ownsPieceIn white ?x1 ?y1))
;Capture to the right (from black's perspective)
(<= (legal0 black pawn ?x0 ?y0 ?x1 ?y1 NEtoSW)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x0 ?y0))
	(nextRank ?y1 ?y0)
	(nextFile ?x1 ?x0)
	(ownsPieceIn white ?x1 ?y1))
;en-passant to the left (yep, we still have to worry about check)
(<= (legal0 black pawn ?x0 4 ?x1 3 NWtoSE)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x0 4))
	(nextFile ?x0 ?x1)
	(true (canEnPassantInFile ?x1))) ;ensures the space is empty
;en-passant to the right
(<= (legal0 black pawn ?x0 4 ?x1 3 NEtoSW)
	(true (control black))
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?x0 4))
	(nextFile ?x1 ?x0)
	(true (canEnPassantInFile ?x1))) ;ensures the space is empty

;Okay... so legal0 is out of the way.
;The next level, legal1, requires that we not be illegally moving a pinned piece.
;This requires that we know which pieces are pinned.
;Luckily, this isn't hard with the nextPieceDir technology.
;First, we figure out which pieces are between other pieces.
;TODO: Current use of between is very inefficient for propnets...
;Can we do this some other way? Maybe with locations?
;(<= (between ?pieceL ?pieceM ?pieceR NtoS)
;	(true (piece ?pieceM ?x ?y))
;	(nextPieceN ?pieceL ?x ?y)
;	(nextPieceS ?pieceR ?x ?y))
;(<= (between ?pieceL ?pieceM ?pieceR WtoE)
;	(true (piece ?pieceM ?x ?y))
;	(nextPieceW ?pieceL ?x ?y)
;	(nextPieceE ?pieceR ?x ?y))
;(<= (between ?pieceL ?pieceM ?pieceR NWtoSE)
;	(true (piece ?pieceM ?x ?y))
;	(nextPieceNW ?pieceL ?x ?y)
;	(nextPieceSE ?pieceR ?x ?y))
;(<= (between ?pieceL ?pieceM ?pieceR NEtoSW)
;	(true (piece ?pieceM ?x ?y))
;	(nextPieceNE ?pieceL ?x ?y)
;	(nextPieceSW ?pieceR ?x ?y))
(<= (between ?pieceC ?pieceM ?pieceK NtoS)
	(true (piece ?pieceM ?x ?y))
	(nextPieceN ?pieceK ?x ?y)
	(nextPieceS ?pieceC ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK NtoS)
	(true (piece ?pieceM ?x ?y))
	(nextPieceN ?pieceC ?x ?y)
	(nextPieceS ?pieceK ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK WtoE)
	(true (piece ?pieceM ?x ?y))
	(nextPieceW ?pieceK ?x ?y)
	(nextPieceE ?pieceC ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK WtoE)
	(true (piece ?pieceM ?x ?y))
	(nextPieceW ?pieceC ?x ?y)
	(nextPieceE ?pieceK ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK NWtoSE)
	(true (piece ?pieceM ?x ?y))
	(nextPieceNW ?pieceK ?x ?y)
	(nextPieceSE ?pieceC ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK NWtoSE)
	(true (piece ?pieceM ?x ?y))
	(nextPieceNW ?pieceC ?x ?y)
	(nextPieceSE ?pieceK ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK NEtoSW)
	(true (piece ?pieceM ?x ?y))
	(nextPieceNE ?pieceK ?x ?y)
	(nextPieceSW ?pieceC ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
(<= (between ?pieceC ?pieceM ?pieceK NEtoSW)
	(true (piece ?pieceM ?x ?y))
	(nextPieceNE ?pieceC ?x ?y)
	(nextPieceSW ?pieceK ?x ?y)
	(istype ?pieceK king)
	(or (istype ?pieceC rook)
		(istype ?pieceC queen)))
;Now we can figure out the pins.
(straight NtoS)
(straight WtoE)
(diagonal NWtoSE)
(diagonal NEtoSW)
(<= (pinned ?pieceM ?dir)
	(between ?pieceC ?pieceM ?pieceK ?dir)
	(owner ?player ?pieceM)
	(owner ?player ?pieceK)
	(owner ?opponent ?pieceC)
	(distinct ?player ?opponent))
;(<= (pinned ?pieceM ?dir)
;	(between ?pieceL ?pieceM ?pieceR ?dir)
;	(owner ?player ?pieceM)
;	(owner ?player ?pieceK)
;	(istype ?pieceL king)
;	(owner ?opponent ?pieceC)
;	(or (istype ?pieceR bishop) (istype ?pieceR queen))
;	(diagonal ?dir)
;	(distinct ?player ?opponent))
;and reversing L and R...
;(<= (pinned ?pieceM ?dir)
;	(between ?pieceL ?pieceM ?pieceR ?dir)
;	(owner ?player ?pieceM)
;	(owner ?player ?pieceR)
;	(istype ?pieceR king)
;	(owner ?opponent ?pieceL)
;	(or (istype ?pieceL rook) (istype ?pieceL queen))
;	(straight ?dir)
;	(distinct ?player ?opponent))
;(<= (pinned ?pieceM ?dir)
;	(between ?pieceL ?pieceM ?pieceR ?dir)
;	(owner ?player ?pieceM)
;	(owner ?player ?pieceR)
;	(istype ?pieceR king)
;	(owner ?opponent ?pieceL)
;	(or (istype ?pieceL bishop) (istype ?pieceL queen))
;	(diagonal ?dir)
;	(distinct ?player ?opponent))
	
(<= (pinnedPiece ?piece)
	(pinned ?piece ?dir))
	
;Now we're in shape to figure out legal1
;Is the move unconstrained by a pin (or legal within a pin)?
;Sentence format: (legal0 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
;if the piece isn't pinned at all, it's fine
(<= (legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(legal0 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(true (piece ?piece ?x0 ?y0))
	(not (pinnedPiece ?piece)))
;if the piece moves in the same direction as the pin, it's also fine
;(note that pieces can't be doubly pinned, as there's only one king)
(<= (legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(legal0 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(true (piece ?piece ?x0 ?y0))
	(pinned ?piece ?dir))
	
;Next we'll want legal2, which verifies that our king is not in check, or otherwise,
;we're doing something to stop the check. If there are multiple checks, then we
;have double-check, and only king moves are possible. We need a check relation that
;takes these ideas into account. Most importantly, we need to be able to figure out if
;a given space intercepts the check.
;First, we use a "threatened" construct that we need anyway for castling. This isn't
;strictly necessary, but could narrow down candidates???
;Note for "threatened": this applies even when the piece is being "threatened" by a
;piece owned by the same player. Use ?player to test actual threatening-ness
;Threatening: straight lines
(<= (threatened ?player ?x ?y)
	(or (nextPieceN ?piece ?x ?y)
		(nextPieceS ?piece ?x ?y)
		(nextPieceW ?piece ?x ?y)
		(nextPieceE ?piece ?x ?y))
	(owner ?player ?piece)
	(or (istype ?piece rook)
		(istype ?piece queen)))
;diagonals
(<= (threatened ?player ?x ?y)
	(or (nextPieceNW ?piece ?x ?y)
		(nextPieceNE ?piece ?x ?y)
		(nextPieceSW ?piece ?x ?y)
		(nextPieceSE ?piece ?x ?y))
	(owner ?player ?piece)
	(or (istype ?piece bishop)
		(istype ?piece queen)))
;knights
(<= (threatened ?player ?x ?y)
	(istype ?piece knight)
	(owner ?player ?piece)
	(true (piece ?piece ?px ?py))
	(knightMove ?px ?py ?x ?y))
;pawns
(<= (threatened white ?x ?y)
	(istype ?piece pawn)
	(owner white ?piece)
	(true (piece ?piece ?px ?py))
	(nextRank ?py ?y)
	(or (nextFile ?px ?x)
		(nextFile ?x ?px)))
(<= (threatened black ?x ?y)
	(istype ?piece pawn)
	(owner black ?piece)
	(true (piece ?piece ?px ?py))
	(nextRank ?y ?py)
	(or (nextFile ?px ?x)
		(nextFile ?x ?px)))
;kings
(<= (threatened ?player ?x ?y)
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?x ?py))
	(or (nextRank ?y ?py)
		(nextRank ?py ?y)))
(<= (threatened ?player ?x ?y)
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?px ?y))
	(or (nextFile ?x ?px)
		(nextFile ?px ?x)))
(<= (threatened ?player ?x ?y)
	(istype ?piece king)
	(owner ?player ?piece)
	(true (piece ?piece ?px ?py))
	(or (nextRank ?y ?py)
		(nextRank ?py ?y))
	(or (nextFile ?x ?px)
		(nextFile ?px ?x)))

;Now, we have a check relation to see what's putting our king in check
;format: (check ?checkingpiece ?king ?dir)
(<= (check ?piece ?king NtoS)
	(istype ?king king)
	(owner ?player ?king)
	(owner ?opponent ?piece)
	(distinct ?player ?opponent)
	(true (piece ?king ?x ?y))
	(or (nextPieceN ?piece ?x ?y)
		(nextPieceS ?piece ?x ?y))
	(or (istype ?piece rook)
		(istype ?piece queen)))
(<= (check ?piece ?king WtoE)
	(istype ?king king)
	(owner ?player ?king)
	(owner ?opponent ?piece)
	(distinct ?player ?opponent)
	(true (piece ?king ?x ?y))
	(or (nextPieceN ?piece ?x ?y)
		(nextPieceS ?piece ?x ?y))
	(or (istype ?piece rook)
		(istype ?piece queen)))
(<= (check ?piece ?king NWtoSE)
	(istype ?king king)
	(owner ?player ?king)
	(owner ?opponent ?piece)
	(distinct ?player ?opponent)
	(true (piece ?king ?x ?y))
	(or (nextPieceNW ?piece ?x ?y)
		(nextPieceSE ?piece ?x ?y))
	(or (istype ?piece bishop)
		(istype ?piece queen)))
(<= (check ?piece ?king NEtoSW)
	(istype ?king king)
	(owner ?player ?king)
	(owner ?opponent ?piece)
	(distinct ?player ?opponent)
	(true (piece ?king ?x ?y))
	(or (nextPieceNE ?piece ?x ?y)
		(nextPieceSW ?piece ?x ?y))
	(or (istype ?piece bishop)
		(istype ?piece queen)))
;knight check
(<= (check ?piece ?king jump)
	(istype ?king king)
	(istype ?piece knight)
	(owner ?player ?king)
	(owner ?opponent ?piece)
	(distinct ?player ?opponent)
	(true (piece ?piece ?px ?py))
	(true (piece ?king ?kx ?ky))
	(knightMove ?px ?py ?kx ?ky))
;pawn check: white pawn
(<= (check ?piece ?king adjacent)
	(istype ?king king)
	(istype ?piece pawn)
	(owner black ?king)
	(owner white ?piece)
	(true (piece ?piece ?px ?py))
	(true (piece ?king ?kx ?ky))
	(nextFile ?kx ?px)
	(nextRank ?py ?ky))
(<= (check ?piece ?king adjacent)
	(istype ?king king)
	(istype ?piece pawn)
	(owner black ?king)
	(owner white ?piece)
	(true (piece ?piece ?px ?py))
	(true (piece ?king ?kx ?ky))
	(nextFile ?px ?kx)
	(nextRank ?py ?ky))
;pawn check: black pawn
(<= (check ?piece ?king adjacent)
	(istype ?king king)
	(istype ?piece pawn)
	(owner white ?king)
	(owner black ?piece)
	(true (piece ?piece ?px ?py))
	(true (piece ?king ?kx ?ky))
	(nextFile ?px ?kx)
	(nextRank ?ky ?py))
(<= (check ?piece ?king adjacent)
	(istype ?king king)
	(istype ?piece pawn)
	(owner white ?king)
	(owner black ?piece)
	(true (piece ?piece ?px ?py))
	(true (piece ?king ?kx ?ky))
	(nextFile ?kx ?px)
	(nextRank ?ky ?py))
;double check
(<= anyCheck
	(check ?piece ?king ?dir))
(<= doubleCheck
	(check ?piece1 ?king ?dir1)
	(check ?piece2 ?king ?dir2)
	(distinct ?piece1 ?piece2))
	
;Now we should be able to figure out if the move is legal2.
;Recall the format: (legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
;Pawn promotion will still happen in a sec, so keep the piece type.

;If we're not in check, the move is legal2. (exception for our king; we might move into check otherwise)
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(not anyCheck))
;If we're capturing the only checking piece, the move is legal2. (exception for our king)
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(check ?piece ?king ?dir2)
	(true (piece ?piece ?x1 ?y1))
	(not doubleCheck))
;If we're making an interposition, the move is legal2.
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(check ?piece ?king NtoS)
	(or (nextPieceN ?piece ?x1 ?y1)
		(nextPieceS ?piece ?x1 ?y1))
	(or (nextPieceN ?king ?x1 ?y1)
		(nextPieceS ?king ?x1 ?y1))
	(not doubleCheck))
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(check ?piece ?king WtoE)
	(or (nextPieceW ?piece ?x1 ?y1)
		(nextPieceE ?piece ?x1 ?y1))
	(or (nextPieceW ?king ?x1 ?y1)
		(nextPieceE ?king ?x1 ?y1))
	(not doubleCheck))
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(check ?piece ?king NWtoSE)
	(or (nextPieceNW ?piece ?x1 ?y1)
		(nextPieceSE ?piece ?x1 ?y1))
	(or (nextPieceNW ?king ?x1 ?y1)
		(nextPieceSE ?king ?x1 ?y1))
	(not doubleCheck))
(<= (legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player ?piecetype ?x0 ?y0 ?x1 ?y1 ?dir)
	(distinct ?piecetype king)
	(check ?piece ?king NEtoSW)
	(or (nextPieceNE ?piece ?x1 ?y1)
		(nextPieceSW ?piece ?x1 ?y1))
	(or (nextPieceNE ?king ?x1 ?y1)
		(nextPieceSW ?king ?x1 ?y1))
	(not doubleCheck))
;king move legality
(<= (legal2 king ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player king ?x0 ?y0 ?x1 ?y1 ?dir)
	(not anyCheck)
	(not (threatened ?opponent ?x1 ?y1))
	(role ?opponent)
	(distinct ?player ?opponent))
;it's legal to take the checking piece, if its square isn't threatened
;there are theoretical situations where we'd have to check for another source
;of check from behind, but in practice there's no such way to flank a king
(<= (legal2 king ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player king ?x0 ?y0 ?x1 ?y1 ?dir)
	(check ?piece ?king ?checkDir)
	(owner ?player ?king) ;probably unnecessary
	(true (piece ?piece ?x1 ?y1))
	(not (threatened ?opponent ?x1 ?y1))
	(role ?opponent)
	(distinct ?player ?opponent))
;finally, we can move out of check, if we aren't moving along the line of check,
;and if the space we're moving into isn't threatened
(<= (checkedInDir ?dir)
	(check ?piece ?king ?dir))
(<= (legal2 king ?x0 ?y0 ?x1 ?y1)
	(legal1 ?player king ?x0 ?y0 ?x1 ?y1 ?dir)
	(not (checkedInDir ?dir))
	(role ?opponent)
	(distinct ?player ?opponent)
	(not (threatened ?opponent ?x1 ?y1)))
	
;Now, for actual legality. This is equivalent to legal2, with two tweaks:
;1. Pawn promotion is available (by transforming pawn moves into the back ranks);
;2. Castling is added here.
;We also need to calculate at this point whether the active player has any moves available.

;control
(init (control white))
(<= (next (control black))
	(true (control white)))
(<= (next (control white))
	(true (control black)))
(<= (legal ?player noop)
	(role ?player)
	(not (true (control ?player))))
;Let's get the normal moves first.
(<= (legal ?player (move ?piecetype ?x0 ?y0 ?x1 ?y1))
	(true (control ?player))
	(legal2 ?piecetype ?x0 ?y0 ?x1 ?y1)
	(distinct ?piecetype pawn))
(<= (legal ?player (move pawn ?x0 ?y0 ?x1 ?y1))
	(true (control ?player))
	(legal2 pawn ?x0 ?y0 ?x1 ?y1)
	(distinct ?y1 1)
	(distinct ?y1 8))
;pawn promotion: allow promotion to queens or knights. Ignore the very rare cases in which
;a bishop or rook would be better (by allowing stalemate instead of defeat).
(<= (legal ?player (move queen ?x0 ?y0 ?x1 1))
	(true (control ?player))
	(legal2 pawn ?x0 ?y0 ?x1 1))
(<= (legal ?player (move knight ?x0 ?y0 ?x1 1))
	(true (control ?player))
	(legal2 pawn ?x0 ?y0 ?x1 1))
(<= (legal ?player (move queen ?x0 ?y0 ?x1 8))
	(true (control ?player))
	(legal2 pawn ?x0 ?y0 ?x1 8))
(<= (legal ?player (move knight ?x0 ?y0 ?x1 8))
	(true (control ?player))
	(legal2 pawn ?x0 ?y0 ?x1 8))
;Now, castling...
(<= (legal white castleKingside)
	(true (control white))
	(not (true whiteHasMovedKing))
	(not (true whiteHasMovedH1Rook))
	(empty f 1)
	(empty g 1)
	(not anyCheck)
	(not (threatened black f 1))
	(not (threatened black g 1)))
(<= (legal white castleQueenside)
	(true (control white))
	(not (true whiteHasMovedKing))
	(not (true whiteHasMovedA1Rook))
	(empty b 1)
	(empty c 1)
	(empty d 1)
	(not anyCheck)
	(not (threatened black c 1))
	(not (threatened black d 1)))
(<= (legal black castleKingside)
	(true (control black))
	(not (true blackHasMovedKing))
	(not (true blackHasMovedH8Rook))
	(empty f 8)
	(empty g 8)
	(not anyCheck)
	(not (threatened white f 8))
	(not (threatened white g 8)))
(<= (legal black castleQueenside)
	(true (control black))
	(not (true blackHasMovedKing))
	(not (true blackHasMovedA8Rook))
	(empty b 8)
	(empty c 8)
	(empty d 8)
	(not anyCheck)
	(not (threatened white c 8))
	(not (threatened white d 8)))
;That takes care of legalities. What about goals and terminalities?
;First we check if the player has any legal moves
(<= hasAnyLegalMoves
	(legal2 ?piecetype ?x0 ?y0 ?x1 ?y1))
(<= hasAnyLegalMoves
	(or (legal ?player castleKingside)
		(legal ?player castleQueenside)))
;active, in check and no legal moves => checkmate
(<= (checkmated ?player)
	(true (control ?player))
	anyCheck
	(not hasAnyLegalMoves))
;Game is over if the active player has no legal moves, or if the game times out
(<= terminal
	(not hasAnyLegalMoves))
(<= terminal
	(true (step 201)))
;Goal values
(<= (goal white 100)
	(checkmated black))
(<= (goal black 0)
	(checkmated black))
(<= (goal white 0)
	(checkmated white))
(<= (goal black 100)
	(checkmated white))
(<= (goal white 50)
	terminal
	(not (checkmated white))
	(not (checkmated black)))
(<= (goal black 50)
	terminal
	(not (checkmated white))
	(not (checkmated black)))
(<= (goal white 0)
	hasAnyLegalMoves
	(not (true (step 201))))
(<= (goal black 0)
	hasAnyLegalMoves
	(not (true (step 201))))
;GLT is taken care of, leaving only physics (i.e. "next"s) and "base"s.
;piece
;It's tricky to maintain a piece in the same position. It's easy to exclude pieces that
;are being moved or captured. It's less easy to handle the corner cases of castling and
;en passant.
;Start by defining a "stable" attribute, for squares whose pieces aren't changing.
;This is easier to do by defining "unstable" first.
(<= (unstable ?x ?y)
	(does ?player (move ?piecetype ?x ?y ?x1 ?y1)))
(<= (unstable ?x ?y)
	(does ?player (move ?piecetype ?x0 ?y0 ?x ?y)))
(<= (unstable e 1)
	(does white castleKingside))
(<= (unstable f 1)
	(does white castleKingside))
(<= (unstable g 1)
	(does white castleKingside))
(<= (unstable h 1)
	(does white castleKingside))
(<= (unstable a 1)
	(does white castleQueenside)) 
(<= (unstable c 1)
	(does white castleQueenside)) 
(<= (unstable d 1)
	(does white castleQueenside)) 
(<= (unstable e 1)
	(does white castleQueenside)) 
(<= (unstable e 8)
	(does black castleKingside))
(<= (unstable f 8)
	(does black castleKingside))
(<= (unstable g 8)
	(does black castleKingside))
(<= (unstable h 8)
	(does black castleKingside))
(<= (unstable a 8)
	(does black castleQueenside)) 
(<= (unstable c 8)
	(does black castleQueenside)) 
(<= (unstable d 8)
	(does black castleQueenside)) 
(<= (unstable e 8)
	(does black castleQueenside))
;and finally, en passant
(<= (unstable ?x 5)
	(does white (move pawn ?x0 5 ?x 6))
	(empty ?x 6)
	(distinct ?x0 ?x))
(<= (unstable ?x 4)
	(does black (move pawn ?x0 4 ?x 3))
	(empty ?x 3)
	(distinct ?x0 ?x))
	
;Now... the transition rules
;First, for stable squares
(<= (next (piece ?piece ?x ?y))
	(true (piece ?piece ?x ?y))
	(not (unstable ?x ?y)))
;Next, squares moved into, without promotion...
(<= (next (piece ?piece ?x ?y))
	(does ?player (move ?piecetype ?x0 ?y0 ?x ?y))
	(true (piece ?piece ?x0 ?y0))
	(istype ?piece ?piecetype))
;Squares with promotion...
;For promoted queens, we use the piece names wq1, wq2, ..., wq8, bq1, ..., bq8, wn1, ...
;note that "piecename" is only true if the piece is on the board (maybe we could rename that)
(<= (promotion ?piecetype ?player ?x ?y)
	(does ?player (move ?piecetype ?x0 ?y0 ?x ?y))
	(true (piece ?pawn ?x0 ?y0))
	(istype ?pawn pawn)
	(distinct ?piecetype pawn))
;white queens
(<= (next (piece wq1 ?x ?y))
	(promotion queen white ?x ?y)
	(not (piecename wq1)))
(<= (next (piece wq2 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(not (piecename wq2)))
(<= (next (piece wq3 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(not (piecename wq3)))
(<= (next (piece wq4 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(piecename wq3)
	(not (piecename wq4)))
(<= (next (piece wq5 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(piecename wq3)
	(piecename wq4)
	(not (piecename wq5)))
(<= (next (piece wq6 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(piecename wq3)
	(piecename wq4)
	(piecename wq5)
	(not (piecename wq6)))
(<= (next (piece wq7 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(piecename wq3)
	(piecename wq4)
	(piecename wq5)
	(piecename wq6)
	(not (piecename wq7)))
(<= (next (piece wq8 ?x ?y))
	(promotion queen white ?x ?y)
	(piecename wq1)
	(piecename wq2)
	(piecename wq3)
	(piecename wq4)
	(piecename wq5)
	(piecename wq6)
	(piecename wq7))
;Next, white knights
(<= (next (piece wn1 ?x ?y))
	(promotion knight white ?x ?y)
	(not (piecename wn1)))
(<= (next (piece wn2 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(not (piecename wn2)))
(<= (next (piece wn3 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(not (piecename wn3)))
(<= (next (piece wn4 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(piecename wn3)
	(not (piecename wn4)))
(<= (next (piece wn5 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(piecename wn3)
	(piecename wn4)
	(not (piecename wn5)))
(<= (next (piece wn6 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(piecename wn3)
	(piecename wn4)
	(piecename wn5)
	(not (piecename wn6)))
(<= (next (piece wn7 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(piecename wn3)
	(piecename wn4)
	(piecename wn5)
	(piecename wn6)
	(not (piecename wn7)))
(<= (next (piece wn8 ?x ?y))
	(promotion knight white ?x ?y)
	(piecename wn1)
	(piecename wn2)
	(piecename wn3)
	(piecename wn4)
	(piecename wn5)
	(piecename wn6)
	(piecename wn7))
;black queens
(<= (next (piece bq1 ?x ?y))
	(promotion queen black ?x ?y)
	(not (piecename bq1)))
(<= (next (piece bq2 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(not (piecename bq2)))
(<= (next (piece bq3 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(not (piecename bq3)))
(<= (next (piece bq4 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(piecename bq3)
	(not (piecename bq4)))
(<= (next (piece bq5 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(piecename bq3)
	(piecename bq4)
	(not (piecename bq5)))
(<= (next (piece bq6 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(piecename bq3)
	(piecename bq4)
	(piecename bq5)
	(not (piecename bq6)))
(<= (next (piece bq7 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(piecename bq3)
	(piecename bq4)
	(piecename bq5)
	(piecename bq6)
	(not (piecename bq7)))
(<= (next (piece bq8 ?x ?y))
	(promotion queen black ?x ?y)
	(piecename bq1)
	(piecename bq2)
	(piecename bq3)
	(piecename bq4)
	(piecename bq5)
	(piecename bq6)
	(piecename bq7))
;Next, black knights
(<= (next (piece bn1 ?x ?y))
	(promotion knight black ?x ?y)
	(not (piecename bn1)))
(<= (next (piece bn2 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(not (piecename bn2)))
(<= (next (piece bn3 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(not (piecename bn3)))
(<= (next (piece bn4 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(piecename bn3)
	(not (piecename bn4)))
(<= (next (piece bn5 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(piecename bn3)
	(piecename bn4)
	(not (piecename bn5)))
(<= (next (piece bn6 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(piecename bn3)
	(piecename bn4)
	(piecename bn5)
	(not (piecename bn6)))
(<= (next (piece bn7 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(piecename bn3)
	(piecename bn4)
	(piecename bn5)
	(piecename bn6)
	(not (piecename bn7)))
(<= (next (piece bn8 ?x ?y))
	(promotion knight black ?x ?y)
	(piecename bn1)
	(piecename bn2)
	(piecename bn3)
	(piecename bn4)
	(piecename bn5)
	(piecename bn6)
	(piecename bn7))
;we need properties of the queens and knights
(owner white wq1)
(owner white wq2)
(owner white wq3)
(owner white wq4)
(owner white wq5)
(owner white wq6)
(owner white wq7)
(owner white wq8)
(owner white wn1)
(owner white wn2)
(owner white wn3)
(owner white wn4)
(owner white wn5)
(owner white wn6)
(owner white wn7)
(owner white wn8)
(owner black bq1)
(owner black bq2)
(owner black bq3)
(owner black bq4)
(owner black bq5)
(owner black bq6)
(owner black bq7)
(owner black bq8)
(owner black bn1)
(owner black bn2)
(owner black bn3)
(owner black bn4)
(owner black bn5)
(owner black bn6)
(owner black bn7)
(owner black bn8)
(istype wq1 queen)
(istype wq2 queen)
(istype wq3 queen)
(istype wq4 queen)
(istype wq5 queen)
(istype wq6 queen)
(istype wq7 queen)
(istype wq8 queen)
(istype bq1 queen)
(istype bq2 queen)
(istype bq3 queen)
(istype bq4 queen)
(istype bq5 queen)
(istype bq6 queen)
(istype bq7 queen)
(istype bq8 queen)
(istype wn1 knight)
(istype wn2 knight)
(istype wn3 knight)
(istype wn4 knight)
(istype wn5 knight)
(istype wn6 knight)
(istype wn7 knight)
(istype wn8 knight)
(istype bn1 knight)
(istype bn2 knight)
(istype bn3 knight)
(istype bn4 knight)
(istype bn5 knight)
(istype bn6 knight)
(istype bn7 knight)
(istype bn8 knight)


;And the four very special cases of castling
(<= (next (piece wk g 1))
    (does white castleKingside))
(<= (next (piece wrh f 1))
	(does white castleKingside))
(<= (next (piece wk c 1))
	(does white castleQueenside))
(<= (next (piece wra d 1))
	(does white castleQueenside))
(<= (next (piece bk g 1))
    (does black castleKingside))
(<= (next (piece brh f 1))
	(does black castleKingside))
(<= (next (piece bk c 1))
	(does black castleQueenside))
(<= (next (piece bra d 1))
	(does black castleQueenside))



;And updating all our extraneous castling-specific base propositions
;These are all latches...
(<= (next whiteHasMovedKing)
	(true whiteHasMovedKing))
(<= (next whiteHasMovedA1Rook)
	(true whiteHasMovedA1Rook))
(<= (next whiteHasMovedH1Rook)
	(true whiteHasMovedH1Rook))
(<= (next blackHasMovedKing)
	(true blackHasMovedKing))
(<= (next blackHasMovedA8Rook)
	(true blackHasMovedA8Rook))
(<= (next blackHasMovedH8Rook)
	(true blackHasMovedH8Rook))
;and the moves that make them true...
(<= (next whiteHasMovedKing)
	(does white (move wk e 1 ?x ?y)))
(<= (next whiteHasMovedA1Rook)
	(does white (move wra a 1 ?x ?y)))
(<= (next whiteHasMovedA1Rook)
	(does ?player (move ?piece ?x ?y a 1))) ;when the rook is captured
(<= (next whiteHasMovedH1Rook)
	(does white (move wrh h 1 ?x ?y)))
(<= (next whiteHasMovedH1Rook)
	(does ?player (move ?piece ?x ?y h 1))) ;when the rook is captured
(<= (next blackHasMovedKing)
	(does black (move wk e 8 ?x ?y)))
(<= (next blackHasMovedA8Rook)
	(does black (move wra a 8 ?x ?y)))
(<= (next blackHasMovedA8Rook)
	(does ?player (move ?piece ?x ?y a 8))) ;when the rook is captured
(<= (next blackHasMovedH8Rook)
	(does black (move wrh h 8 ?x ?y)))
(<= (next blackHasMovedH8Rook)
	(does ?player (move ?piece ?x ?y h 8))) ;when the rook is captured

;en-passant physics
(<= (next (canEnPassantInFile ?x))
	(does ?player (move pawn ?x ?y0 ?x ?y1))
	(not (nextRank ?y0 ?y1))
	(not (nextRank ?y1 ?y0)))

;finally (?), the step counter
(init (step 1))
(<= (next (step ?y))
    (true (step ?x))
    (succ ?x ?y))

(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)
(succ 50 51)
(succ 51 52)
(succ 52 53)
(succ 53 54)
(succ 54 55)
(succ 55 56)
(succ 56 57)
(succ 57 58)
(succ 58 59)
(succ 59 60)
(succ 60 61)
(succ 61 62)
(succ 62 63)
(succ 63 64)
(succ 64 65)
(succ 65 66)
(succ 66 67)
(succ 67 68)
(succ 68 69)
(succ 69 70)
(succ 70 71)
(succ 71 72)
(succ 72 73)
(succ 73 74)
(succ 74 75)
(succ 75 76)
(succ 76 77)
(succ 77 78)
(succ 78 79)
(succ 79 80)
(succ 80 81)
(succ 81 82)
(succ 82 83)
(succ 83 84)
(succ 84 85)
(succ 85 86)
(succ 86 87)
(succ 87 88)
(succ 88 89)
(succ 89 90)
(succ 90 91)
(succ 91 92)
(succ 92 93)
(succ 93 94)
(succ 94 95)
(succ 95 96)
(succ 96 97)
(succ 97 98)
(succ 98 99)
(succ 99 100)
(succ 100 101)
(succ 101 102)
(succ 102 103)
(succ 103 104)
(succ 104 105)
(succ 105 106)
(succ 106 107)
(succ 107 108)
(succ 108 109)
(succ 109 110)
(succ 110 111)
(succ 111 112)
(succ 112 113)
(succ 113 114)
(succ 114 115)
(succ 115 116)
(succ 116 117)
(succ 117 118)
(succ 118 119)
(succ 119 120)
(succ 120 121)
(succ 121 122)
(succ 122 123)
(succ 123 124)
(succ 124 125)
(succ 125 126)
(succ 126 127)
(succ 127 128)
(succ 128 129)
(succ 129 130)
(succ 130 131)
(succ 131 132)
(succ 132 133)
(succ 133 134)
(succ 134 135)
(succ 135 136)
(succ 136 137)
(succ 137 138)
(succ 138 139)
(succ 139 140)
(succ 140 141)
(succ 141 142)
(succ 142 143)
(succ 143 144)
(succ 144 145)
(succ 145 146)
(succ 146 147)
(succ 147 148)
(succ 148 149)
(succ 149 150)
(succ 150 151)
(succ 151 152)
(succ 152 153)
(succ 153 154)
(succ 154 155)
(succ 155 156)
(succ 156 157)
(succ 157 158)
(succ 158 159)
(succ 159 160)
(succ 160 161)
(succ 161 162)
(succ 162 163)
(succ 163 164)
(succ 164 165)
(succ 165 166)
(succ 166 167)
(succ 167 168)
(succ 168 169)
(succ 169 170)
(succ 170 171)
(succ 171 172)
(succ 172 173)
(succ 173 174)
(succ 174 175)
(succ 175 176)
(succ 176 177)
(succ 177 178)
(succ 178 179)
(succ 179 180)
(succ 180 181)
(succ 181 182)
(succ 182 183)
(succ 183 184)
(succ 184 185)
(succ 185 186)
(succ 186 187)
(succ 187 188)
(succ 188 189)
(succ 189 190)
(succ 190 191)
(succ 191 192)
(succ 192 193)
(succ 193 194)
(succ 194 195)
(succ 195 196)
(succ 196 197)
(succ 197 198)
(succ 198 199)
(succ 199 200)
(succ 200 201)

; Bases and inputs
(base (step 1))
(<= (base (step ?n))
	(succ ?nm1 ?n))

(base (control white))
(base (control black))

(base whiteHasMovedKing)
(base whiteHasMovedA1Rook)
(base whiteHasMovedH1Rook)
(base blackHasMovedKing)
(base blackHasMovedA8Rook)
(base blackHasMovedH8Rook)
(<= (base (canEnPassantInFile ?x))
	(file ?x))

(<= (base (piece ?piece ?x ?y))
	(file ?x)
	(rank ?y)
	(or (istype ?piece king)
	    (istype ?piece queen)
	    (istype ?piece rook)
	    (istype ?piece knight)))
(<= (base (piece ?piece ?x ?y))
	(file ?x)
	(rank ?y)
	(istype ?piece pawn)
	(distinct ?y 1)
	(distinct ?y 8))
; More complex logic for bishops...
(oddfile  a)
(evenfile b)
(oddfile  c)
(evenfile d)
(oddfile  e)
(evenfile f)
(oddfile  g)
(evenfile h)
(oddrank  1)
(evenrank 2)
(oddrank  3)
(evenrank 4)
(oddrank  5)
(evenrank 6)
(oddrank  7)
(evenrank 8)
(<= (whitesquare ?x ?y)
	(oddfile ?x)
	(evenrank ?y))
(<= (whitesquare ?x ?y)
	(evenfile ?x)
	(oddrank ?y))
(<= (blacksquare ?x ?y)
	(evenfile ?x)
	(evenrank ?y))
(<= (blacksquare ?x ?y)
	(oddfile ?x)
	(oddrank ?y))
(<= (base (piece wbf ?x ?y))
	(whitesquare ?x ?y))
(<= (base (piece bbc ?x ?y))
	(whitesquare ?x ?y))
(<= (base (piece wbc ?x ?y))
	(blacksquare ?x ?y))
(<= (base (piece bbf ?x ?y))
	(blacksquare ?x ?y))
	
(<= (adjFile ?x0 ?x1)
	(nextFile ?x0 ?x1))
(<= (adjFile ?x0 ?x1)
	(nextFile ?x1 ?x0))
(<= (adjRank ?y0 ?y1)
	(nextRank ?y0 ?y1))
(<= (adjRank ?y0 ?y1)
	(nextRank ?y1 ?y0))

; Legal inputs are more complex still
(input white noop)
(input black noop)
(<= (input ?player castleKingside)
	(role ?player))
(<= (input ?player castleQueenside)
	(role ?player))
;Pawn moves
;Move forward by 1
(<= (input white (move pawn ?x0 ?y0 ?x0 ?y1))
	(file ?x0)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
(<= (input black (move pawn ?x0 ?y1 ?x0 ?y0))
	(file ?x0)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
;Capture
(<= (input white (move pawn ?x0 ?y0 ?x1 ?y1))
	(adjFile ?x0 ?x1)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
(<= (input black (move pawn ?x0 ?y1 ?x1 ?y0))
	(adjFile ?x0 ?x1)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
;Move forward by 2
(<= (input white (move pawn ?x 2 ?x 4))
	(file ?x))
(<= (input black (move pawn ?x 7 ?x 5))
	(file ?x))
;Promotion to a knight
(<= (input white (move knight ?x0 ?y0 ?x0 ?y1))
	(file ?x0)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
(<= (input black (move knight ?x0 ?y1 ?x0 ?y0))
	(file ?x0)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
(<= (input white (move knight ?x0 ?y0 ?x1 ?y1))
	(adjFile ?x0 ?x1)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
(<= (input black (move knight ?x0 ?y1 ?x1 ?y0))
	(adjFile ?x0 ?x1)
	(nextRank ?y0 ?y1)
	(distinct ?y0 1)
	(distinct ?y1 8))
; Knight moves
(<= (input ?player (move knight ?x0 ?y0 ?x1 ?y1))
	(role ?player)
	(knightMove ?x0 ?y0 ?x1 ?y1))
; Bishop moves
; Define pairs of squares on the same diagonals
(<= (diagNW ?x1 ?y0 ?x0 ?y1)
	(nextFile ?x0 ?x1)
	(nextRank ?y0 ?y1))
(<= (diagNW ?x2 ?y0 ?x0 ?y2)
	(nextFile ?x1 ?x2)
	(nextRank ?y1 ?y2)
	(diagNW ?x1 ?y0 ?x0 ?y1))
(<= (diagNE ?x0 ?y0 ?x1 ?y1)
	(nextFile ?x0 ?x1)
	(nextRank ?y0 ?y1))
(<= (diagNE ?x0 ?y0 ?x2 ?y2)
	(nextFile ?x1 ?x2)
	(nextRank ?y1 ?y2)
	(diagNE ?x0 ?y0 ?x1 ?y1))
(<= (sameDiagonal ?x0 ?y0 ?x1 ?y1)
	(or (diagNW ?x0 ?y0 ?x1 ?y1)
		(diagNW ?x1 ?y1 ?x0 ?y0)
		(diagNE ?x0 ?y0 ?x1 ?y1)
		(diagNE ?x1 ?y1 ?x0 ?y0)))
(<= (input ?player (move bishop ?x0 ?y0 ?x1 ?y1))
	(role ?player)
	(sameDiagonal ?x0 ?y0 ?x1 ?y1))
; Rook moves
(<= (input ?player (move rook ?x ?y0 ?x ?y1))
	(role ?player)
	(file ?x)
	(rank ?y0)
	(rank ?y1))
(<= (input ?player (move rook ?x0 ?y ?x1 ?y))
	(role ?player)
	(file ?x0)
	(file ?x1)
	(rank ?y))
; Queen moves
(<= (input ?player (move queen ?x0 ?y0 ?x1 ?y1))
	(role ?player)
	(sameDiagonal ?x0 ?y0 ?x1 ?y1))
(<= (input ?player (move queen ?x ?y0 ?x ?y1))
	(role ?player)
	(file ?x)
	(rank ?y0)
	(rank ?y1))
(<= (input ?player (move queen ?x0 ?y ?x1 ?y))
	(role ?player)
	(file ?x0)
	(file ?x1)
	(rank ?y))
; King moves
(<= (input ?player (move king ?x ?y0 ?x ?y1))
	(role ?player)
	(file ?x)
	(adjRank ?y0 ?y1))
(<= (input ?player (move king ?x0 ?y ?x1 ?y))
	(role ?player)
	(adjFile ?x0 ?x1)
	(rank ?y))
(<= (input ?player (move king ?x0 ?y0 ?x1 ?y1))
	(role ?player)
	(adjFile ?x0 ?x1)
	(adjRank ?y0 ?y1))
