;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Hex with Pie-rule (by Andrew Rose, based on Stanford repository version)
;;;
;;; Variable conventions...
;;;
;;; ?x, ?y  are the co-ordinates of a hex
;;; ?k      is the step on which a marker was played
;;; ?m      is the colour of a marker (red or blue)
;;; ?r      is a role (player1 or player2)
;;;
;;; Because this variant uses the Pie rule, there isn't a fixed red player or
;;; blue player.  Instead, (usingMarker ?r ?m) determines which player is using
;;; which marker at any point in time.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Components.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (role player1)
  (role player2)

  (<= (base (cell ?x ?y ?m))
      (row ?x)
      (col ?y)
      (marker ?m))

  (<= (base (connected ?k ?x ?y))
      (succ ?k ?o)
      (row ?x)
      (col ?y))

  (<= (base (color ?k ?m))
      (succ ?k ?o)
      (marker ?m))

  (<= (base (step ?k))
      (succ ?k ?o))

  (<= (base (control ?r))
      (role ?r))

  (<= (base (usingMarker ?r ?m))
      (role ?r)
      (marker ?m))

  (base canSwap)

  (<= (input ?r (place ?x ?y))
      (role ?r)
      (row ?x)
      (col ?y))

  (<= (input ?r noop)
      (role ?r))

  (<= (input ?r swap)
      (role ?r))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (init (control player1))
  (init (step 1))
  (init (usingMarker player1 red))
  (init (usingMarker player2 blue))
  (init canSwap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; legal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (legal ?r (place ?x ?y))
      (true (control ?r))
      (row ?x)
      (col ?y)
      (not (true (cell ?x ?y red)))
      (not (true (cell ?x ?y blue))))

  (<= (legal player2 swap)
      (true (control player2))
      (true canSwap))

  (<= (legal player1 noop)
      (true (control player2)))

  (<= (legal player2 noop)
      (true (control player1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; next
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (next (cell ?x ?y ?m))
      (does ?r (place ?x ?y))
      (true (usingMarker ?r ?m)))

  (<= (next (cell ?x ?y ?m))
      (true (cell ?x ?y ?m)))


  (<= (next (step ?a))
      (true (step ?b))
      (succ ?b ?a))


  (<= (next (color ?k ?m))
      (true (step ?k))
      (true (control ?r))
      (true (usingMarker ?r ?m)))

  (<= (next (color ?k ?m))
      (true (color ?k ?m)))


  (<= (next (connected ?k ?x ?y))
      (does ?r (place ?x ?y))
      (true (step ?k)))

  (<= (next (connected ?k ?x ?y))
      (transfer ?e)
      (true (connected ?e ?x ?y))
      (true (step ?k)))

  (<= (next (connected ?k ?x ?y))
      (true (connected ?k ?x ?y))
      (not (transfer ?k)))


  (<= (next (control player1))
      (true (control player2)))

  (<= (next (control player2))
      (true (control player1)))


  (<= (transfer ?k)
      (does ?r (place ?x ?y))
      (true (usingMarker ?r ?m))
      (true (color ?k ?m))
      (true (connected ?k ?v ?w))
      (adjacent ?x ?y ?v ?w))


  (<= (next canSwap)
      (true canSwap)
      (does player2 noop))


  (<= (next (usingMarker ?r ?m))
      (true (usingMarker ?r ?m))
      (not (does player2 swap)))

  (<= (next (usingMarker player1 blue))
      (does player2 swap))

  (<= (next (usingMarker player2 red))
      (does player2 swap))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; goal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (goal ?r 100)
      (true (usingMarker ?r red))
      redpath)
  (<= (goal ?r 100)
      (true (usingMarker ?r blue))
      bluepath)

  (<= (goal ?r 0)
      (role ?r)
      (not (goal ?r 100)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; terminal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= terminal redpath)
  (<= terminal bluepath)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Views
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (<= (adjacent ?j ?k ?j ?n)
      (nextcol ?k ?n)
      (row ?j))

  (<= (adjacent ?j ?k ?j ?n)
      (nextcol ?n ?k)
      (row ?j))

  (<= (adjacent ?j ?k ?m ?k)
      (nextrow ?j ?m)
      (col ?k))

  (<= (adjacent ?j ?k ?m ?k)
      (nextrow ?m ?j)
      (col ?k))

  (<= (adjacent ?j ?k ?m ?n)
      (nextrow ?m ?j)
      (nextcol ?k ?n))

  (<= (adjacent ?j ?k ?m ?n)
      (nextrow ?j ?m)
      (nextcol ?n ?k))


  (<= redpath
      (true (connected ?k a ?i))
      (true (connected ?k i ?j))
      (true (color ?k red)))

  (<= bluepath
      (true (connected ?k ?i 1))
      (true (connected ?k ?j 9))
      (true (color ?k blue)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Data
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (marker red)
  (marker blue)

  (row a)
  (row b)
  (row c)
  (row d)
  (row e)
  (row f)
  (row g)
  (row h)
  (row i)

  (col 1)
  (col 2)
  (col 3)
  (col 4)
  (col 5)
  (col 6)
  (col 7)
  (col 8)
  (col 9)

  (nextrow a b)
  (nextrow b c)
  (nextrow c d)
  (nextrow d e)
  (nextrow e f)
  (nextrow f g)
  (nextrow g h)
  (nextrow h i)

  (nextcol 1 2)
  (nextcol 2 3)
  (nextcol 3 4)
  (nextcol 4 5)
  (nextcol 5 6)
  (nextcol 6 7)
  (nextcol 7 8)
  (nextcol 8 9)

  (succ 1 2)
  (succ 2 3)
  (succ 3 4)
  (succ 4 5)
  (succ 5 6)
  (succ 6 7)
  (succ 7 8)
  (succ 8 9)
  (succ 9 10)
  (succ 10 11)
  (succ 11 12)
  (succ 12 13)
  (succ 13 14)
  (succ 14 15)
  (succ 15 16)
  (succ 16 17)
  (succ 17 18)
  (succ 18 19)
  (succ 19 20)
  (succ 20 21)
  (succ 21 22)
  (succ 22 23)
  (succ 23 24)
  (succ 24 25)
  (succ 25 26)
  (succ 26 27)
  (succ 27 28)
  (succ 28 29)
  (succ 29 30)
  (succ 30 31)
  (succ 31 32)
  (succ 32 33)
  (succ 33 34)
  (succ 34 35)
  (succ 35 36)
  (succ 36 37)
  (succ 37 38)
  (succ 38 39)
  (succ 39 40)
  (succ 40 41)
  (succ 41 42)
  (succ 42 43)
  (succ 43 44)
  (succ 44 45)
  (succ 45 46)
  (succ 46 47)
  (succ 47 48)
  (succ 48 49)
  (succ 49 50)
  (succ 50 51)
  (succ 51 52)
  (succ 52 53)
  (succ 53 54)
  (succ 54 55)
  (succ 55 56)
  (succ 56 57)
  (succ 57 58)
  (succ 58 59)
  (succ 59 60)
  (succ 60 61)
  (succ 61 62)
  (succ 62 63)
  (succ 63 64)
  (succ 64 65)
  (succ 65 66)
  (succ 66 67)
  (succ 67 68)
  (succ 68 69)
  (succ 69 70)
  (succ 70 71)
  (succ 71 72)
  (succ 72 73)
  (succ 73 74)
  (succ 74 75)
  (succ 75 76)
  (succ 76 77)
  (succ 77 78)
  (succ 78 79)
  (succ 79 80)
  (succ 80 81)
  (succ 81 82)
  (succ 82 83)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

