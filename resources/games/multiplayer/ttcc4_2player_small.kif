;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; TicTacChessCheckersFour (alternate implementation)
;;;
;;; Changed by Sam Schreiber to have only two players,
;;; and to only be on a 3x3 board. 
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLE Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role red)
(role blue)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; INIT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (control red))

(init (cell 1 4 redPawn))
(init (cell 1 3 redChecker))
(init (cell 1 2 redKnight))

(init (cell 5 4 bluePawn))
(init (cell 5 3 blueChecker))
(init (cell 5 2 blueKnight))

(init (step 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LEGAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (legal ?player noop)
    (role ?player)) 
    
(<= (legal ?player (drop ?x))
	(true (control ?player))
	(chute ?x)
	(emptyCell ?x 4))
	
(<= (legal ?player (pawnMove ?x1 ?y1 ?x2 ?y2))
	(true (control ?player))
	(true (cell ?x1 ?y1 ?piece))
	(piece ?piece pawn ?player)
	(orthogonal ?x1 ?y1 ?x2 ?y2)
	(onBoard ?x2 ?y2)
	(emptyCell ?x2 ?y2))
(<= (legal ?player1 (pawnMove ?x1 ?y1 ?x2 ?y2))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 pawn ?player1)
	(diagonal ?x1 ?y1 ?x2 ?y2)
	(onBoard ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2))
	
(<= (legal ?player (knightMove ?x1 ?y1 ?x2 ?y2))
	(true (control ?player))
	(true (cell ?x1 ?y1 ?piece))
	(piece ?piece knight ?player)
	(ell ?x1 ?y1 ?x2 ?y2)
	(onBoard ?x2 ?y2)
	(emptyCell ?x2 ?y2))
(<= (legal ?player1 (knightMove ?x1 ?y1 ?x2 ?y2))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 knight ?player1)
	(ell ?x1 ?y1 ?x2 ?y2)
	(onBoard ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2))

(<= (legal ?player (checkerMove ?x1 ?y1 ?x2 ?y2))
	(true (control ?player))
	(true (cell ?x1 ?y1 ?piece))
	(piece ?piece checker ?player)
	(diagonal ?x1 ?y1 ?x2 ?y2)
	(onBoard ?x2 ?y2)
	(emptyCell ?x2 ?y2))

(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 checker ?player1)
	(upRight ?x1 ?y1 ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2)
	(upRight ?x2 ?y2 ?x3 ?y3)
	(onBoard ?x3 ?y3)
	(emptyCell ?x3 ?y3))
(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 checker ?player1)
	(upLeft ?x1 ?y1 ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2)
	(upLeft ?x2 ?y2 ?x3 ?y3)
	(onBoard ?x3 ?y3)
	(emptyCell ?x3 ?y3))
(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 checker ?player1)
	(downRight ?x1 ?y1 ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2)
	(downRight ?x2 ?y2 ?x3 ?y3)
	(onBoard ?x3 ?y3)
	(emptyCell ?x3 ?y3))
(<= (legal ?player1 (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(true (control ?player1))
	(true (cell ?x1 ?y1 ?piece1))
	(piece ?piece1 checker ?player1)
	(downLeft ?x1 ?y1 ?x2 ?y2)
	(true (cell ?x2 ?y2 ?piece2))
	(piece ?piece2 ?ignore ?player2)
	(distinct ?player1 ?player2)
	(downLeft ?x2 ?y2 ?x3 ?y3)
	(onBoard ?x3 ?y3)
	(emptyCell ?x3 ?y3))
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; NEXT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next (control ?p2))
    (true (control ?p1))
    (rotation ?p1 ?p2))

(<= (next (cell ?x ?y ?piece))
	(true (control ?player))
	(does ?player noop)
	(true (cell ?x ?y ?piece)))

(<= (next (cell ?x ?y ?piece))
	(does ?player (drop ?x))
	(lowPoint ?x ?y)
	(piece ?piece disc ?player))
(<= (next (cell ?x ?y ?piece))
  	(does ?player (drop ?ignore))
  	(true (cell ?x ?y ?piece)))

(<= (next (cell ?x2 ?y2 ?piece))
	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))
	(piece ?piece pawn ?player))	
(<= (next (cell ?xAny ?yAny ?piece))
	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))
	(distinctCell ?xAny ?yAny ?x1 ?y1)
	(distinctCell ?xAny ?yAny ?x2 ?y2)
	(true (cell ?xAny ?yAny ?piece)))

(<= (next (cell ?x2 ?y2 ?piece))
	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))
	(piece ?piece knight ?player))	
(<= (next (cell ?xAny ?yAny ?piece))
	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))
	(distinctCell ?xAny ?yAny ?x1 ?y1)
	(distinctCell ?xAny ?yAny ?x2 ?y2)
	(true (cell ?xAny ?yAny ?piece)))

(<= (next (cell ?x2 ?y2 ?piece))
	(does ?player (checkerMove ?x1 ?y1 ?x2 ?y2))
	(piece ?piece checker ?player))	
(<= (next (cell ?xAny ?yAny ?piece))
	(does ?player (checkerMove ?x1 ?y1 ?x2 ?y2))
	(distinctCell ?xAny ?yAny ?x1 ?y1)
	(distinctCell ?xAny ?yAny ?x2 ?y2)
	(true (cell ?xAny ?yAny ?piece)))

(<= (next (cell ?x3 ?y3 ?piece))
	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(piece ?piece checker ?player))
(<= (next (cell ?xAny ?yAny ?piece))
	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(distinctCell ?xAny ?yAny ?x1 ?y1)
	(distinctCell ?xAny ?yAny ?x2 ?y2)
	(true (cell ?xAny ?yAny ?piece)))
	
(<= (next (cell ?xStart ?yStart ?piece))
	(does ?player (pawnMove ?x1 ?y1 ?x2 ?y2))
	(true (cell ?x2 ?y2 ?piece))
	(start ?piece ?xStart ?yStart))
(<= (next (cell ?xStart ?yStart ?piece))
	(does ?player (knightMove ?x1 ?y1 ?x2 ?y2))
	(true (cell ?x2 ?y2 ?piece))
	(start ?piece ?xStart ?yStart))
(<= (next (cell ?xStart ?yStart ?piece))
	(does ?player (jump ?x1 ?y1 ?x2 ?y2 ?x3 ?y3))
	(true (cell ?x2 ?y2 ?piece))
	(start ?piece ?xStart ?yStart))
	
(<= (next (step ?t2))
	(true (step ?t1))
	(stepCount ?t1 ?t2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TERMINAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal
	(role ?player)
	(line ?player))
(<= terminal
	(true (step 101)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GOAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal ?player 0)
	(role ?player)
	(not (line ?player)))
(<= (goal ?player 100)
	(role ?player)
	(line ?player))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; View Definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (lowPoint ?x ?y)
	(lowPointFrom ?x 4 ?x ?y))
(<= (lowPointFrom ?x 2 ?x 2)
	(index ?x))
(<= (lowPointFrom ?x ?y2 ?x ?y2)
	(index ?x)
	(plus1 ?y1 ?y2)
	(not (emptyCell ?x ?y1)))
(<= (lowPointFrom ?x ?y3 ?x ?y1)
	(index ?x)
	(plus1 ?y2 ?y3)
	(emptyCell ?x ?y2)
	(lowPointFrom ?x ?y2 ?x ?y1))
	
(<= (orthogonal ?x1 ?y1 ?x2 ?y2)
	(up ?x1 ?y1 ?x2 ?y2))
(<= (orthogonal ?x1 ?y1 ?x2 ?y2)
	(down ?x1 ?y1 ?x2 ?y2))
(<= (orthogonal ?x1 ?y1 ?x2 ?y2)
	(left ?x1 ?y1 ?x2 ?y2))
(<= (orthogonal ?x1 ?y1 ?x2 ?y2)
	(right ?x1 ?y1 ?x2 ?y2))

(<= (diagonal ?x1 ?y1 ?x2 ?y2)
	(upLeft ?x1 ?y1 ?x2 ?y2))
(<= (diagonal ?x1 ?y1 ?x2 ?y2)
	(upRight ?x1 ?y1 ?x2 ?y2))
(<= (diagonal ?x1 ?y1 ?x2 ?y2)
	(downLeft ?x1 ?y1 ?x2 ?y2))
(<= (diagonal ?x1 ?y1 ?x2 ?y2)
	(downRight ?x1 ?y1 ?x2 ?y2))

(<= (ell ?x1 ?y1 ?x3 ?y3)
	(up ?x1 ?y1 ?x2 ?y2)
	(upRight ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(up ?x1 ?y1 ?x2 ?y2)
	(upLeft ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(right ?x1 ?y1 ?x2 ?y2)
	(upRight ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(right ?x1 ?y1 ?x2 ?y2)
	(downRight ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(down ?x1 ?y1 ?x2 ?y2)
	(downRight ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(down ?x1 ?y1 ?x2 ?y2)
	(downLeft ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(left ?x1 ?y1 ?x2 ?y2)
	(upLeft ?x2 ?y2 ?x3 ?y3))
(<= (ell ?x1 ?y1 ?x3 ?y3)
	(left ?x1 ?y1 ?x2 ?y2)
	(downLeft ?x2 ?y2 ?x3 ?y3))

(<= (left ?x1 ?y ?x2 ?y)
	(plus1 ?x2 ?x1)
	(index ?y))
(<= (right ?x1 ?y ?x2 ?y)
	(plus1 ?x1 ?x2)
	(index ?y))
(<= (down ?x ?y1 ?x ?y2)
	(index ?x)
	(plus1 ?y2 ?y1))
(<= (up ?x ?y1 ?x ?y2)
	(index ?x)
	(plus1 ?y1 ?y2))

(<= (upLeft ?x1 ?y1 ?x2 ?y2)
	(plus1 ?x2 ?x1)
	(plus1 ?y1 ?y2))
(<= (upRight ?x1 ?y1 ?x2 ?y2)
	(plus1 ?x1 ?x2)
	(plus1 ?y1 ?y2))
(<= (downLeft ?x1 ?y1 ?x2 ?y2)
	(plus1 ?x2 ?x1)
	(plus1 ?y2 ?y1))
(<= (downRight ?x1 ?y1 ?x2 ?y2)
	(plus1 ?x1 ?x2)
	(plus1 ?y2 ?y1))

(<= (controls ?x ?y ?role)
    (true (cell ?x ?y ?piece))
    (piece ?piece ?ignore ?role))
    
(<= (onBoard ?x ?y)
	(cell ?x ?y)
	(distinct ?x 1)
	(distinct ?x 5)
	(distinct ?y 1)
	(distinct ?y 5))

(<= (cell ?x ?y)
	(index ?x)
	(index ?y))

(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
	(cell ?x1 ?y1)
	(cell ?x2 ?y2)
	(distinct ?x1 ?x2))
(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
	(cell ?x1 ?y1)
	(cell ?x2 ?y2)
	(distinct ?y1 ?y2))

(<= (emptyCell ?x ?y)
	(cell ?x ?y)
    (not (controls ?x ?y red))
    (not (controls ?x ?y blue)))

(<= (line ?player)
	(row ?player))
(<= (line ?player)
	(column ?player))
(<= (line ?player)
	(diag ?player))
	
(<= (row ?player)
	(controls 2 2 ?player)
	(controls 3 2 ?player)
	(controls 4 2 ?player))
(<= (row ?player)
	(controls 2 3 ?player)
	(controls 3 3 ?player)
	(controls 4 3 ?player))
(<= (row ?player)
	(controls 2 4 ?player)
	(controls 3 4 ?player)
	(controls 4 4 ?player))
    
(<= (column ?player)
	(controls 2 2 ?player)
	(controls 2 3 ?player)
	(controls 2 4 ?player))
(<= (column ?player)
	(controls 3 2 ?player)
	(controls 3 3 ?player)
	(controls 3 4 ?player))
(<= (column ?player)
	(controls 4 2 ?player)
	(controls 4 3 ?player)
	(controls 4 4 ?player))

(<= (diag ?player)
	(controls 2 2 ?player)
	(controls 3 3 ?player)
	(controls 4 4 ?player))
(<= (diag ?player)
	(controls 2 4 ?player)
	(controls 3 3 ?player)
	(controls 4 2 ?player))
    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Static Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(rotation red blue) (rotation blue red)

(start redPawn 1 4)    (start redChecker 1 3)    (start redKnight 1 2)
(start bluePawn 5 2)   (start blueChecker 5 3)   (start blueKnight 5 4)

(piece redDisc disc red)       (piece blueDisc disc blue)
(piece redPawn pawn red)       (piece bluePawn pawn blue)
(piece redChecker checker red) (piece blueChecker checker blue)
(piece redKnight knight red)   (piece blueKnight knight blue)

(chute 2) (chute 3) (chute 4)

(index 1) (index 2) (index 3) (index 4) (index 5)
(plus1 1 2) (plus1 2 3) (plus1 3 4) (plus1 4 5)

(stepCount  1  2) (stepCount  2  3) (stepCount  3  4) (stepCount  4  5) (stepCount  5  6) (stepCount  6  7) (stepCount  7  8) (stepCount  8  9) (stepCount  9 10) (stepCount 10 11)
(stepCount 11 12) (stepCount 12 13) (stepCount 13 14) (stepCount 14 15) (stepCount 15 16) (stepCount 16 17) (stepCount 17 18) (stepCount 18 19) (stepCount 19 20) (stepCount 20 21)
(stepCount 21 22) (stepCount 22 23) (stepCount 23 24) (stepCount 24 25) (stepCount 25 26) (stepCount 26 27) (stepCount 27 28) (stepCount 28 29) (stepCount 29 30) (stepCount 30 31)
(stepCount 31 32) (stepCount 32 33) (stepCount 33 34) (stepCount 34 35) (stepCount 35 36) (stepCount 36 37) (stepCount 37 38) (stepCount 38 39) (stepCount 39 40) (stepCount 40 41)
(stepCount 41 42) (stepCount 42 43) (stepCount 43 44) (stepCount 44 45) (stepCount 45 46) (stepCount 46 47) (stepCount 47 48) (stepCount 48 49) (stepCount 49 50) (stepCount 50 51)
(stepCount 51 52) (stepCount 52 53) (stepCount 53 54) (stepCount 54 55) (stepCount 55 56) (stepCount 56 57) (stepCount 57 58) (stepCount 58 59) (stepCount 59 60) (stepCount 60 61)
(stepCount 61 62) (stepCount 62 63) (stepCount 63 64) (stepCount 64 65) (stepCount 65 66) (stepCount 66 67) (stepCount 67 68) (stepCount 68 69) (stepCount 69 70) (stepCount 70 71)
(stepCount 71 72) (stepCount 72 73) (stepCount 73 74) (stepCount 74 75) (stepCount 75 76) (stepCount 76 77) (stepCount 77 78) (stepCount 78 79) (stepCount 79 80) (stepCount 80 81)
(stepCount 81 82) (stepCount 82 83) (stepCount 83 84) (stepCount 84 85) (stepCount 85 86) (stepCount 86 87) (stepCount 87 88) (stepCount 88 89) (stepCount 89 90) (stepCount 90 91)
(stepCount 91 92) (stepCount 92 93) (stepCount 93 94) (stepCount 94 95) (stepCount 95 96) (stepCount 96 97) (stepCount 97 98) (stepCount 98 99) (stepCount 99 100) (stepCount 100 101)
